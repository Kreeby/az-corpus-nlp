Исмаил Садыгов
Рамин Махмудзаде
Наида Исаева
Учебник для 9-го класса
общеобразовательной
школы
Утверждено приказом
Министерства
образования
Азербайджанской
Республики №712 
от 09.06.2008
Утверждено 
Министерством образования 
Азербайджанской Республики 
Научный редактор: Расим Алигулиев, член-корреспондент НАНА, д.т.н., профессор
Рецензенты: Алекпер Алиев, д.т.н., профессор
Хаят Ахундова, педагог школы №164 г.Баку
Валид Магеррамов, педагог лицея с физико-математическим и
информатическим уклоном г.Баку
Самиха Рустамова, педагог школы №258 г.Баку
Гюльнара Салимова, педагог школы №7 г.Баку
Перевод:     Наида Исаева 
Информатика — 9. Учебник для 9-го класса общеобразовательной школы. 
И.Дж.Садыгов, Р.А.Махмудзаде, Н.Р.Исаева. Баку, “Bakınəşr”, 2010, 128 стр.
ISBN-978-9952-430-08-8
©  Министерство образования Азербайджанской Республики, 2010
© “Bakınəşr”. “ТМ group”. 2010
1
Язык
программирования
PASCAL
КЛАССИФИКАЦИЯ ПРОГРАММНОГО ОБЕСПЕЧЕНИЯ
Для выполнения компьютером любой работы, наряду с аппаратным обес -
пе чением, необходимы соответствующие программы. Именно прог рам мы
оп ределяют реакции компьютера на нажатие клавиш на клавиатуре, дви же -
ния мыши, прием информации с другого компьютера. Пос редством про -
грамм, имеющихся на компьютере, осуществляется вывод ин формации на
экран, печать документа на прин тере, прослушивание му зы ки.
Программное обеспечение компьютера (“software”) – неотъемлемая
часть компьютерной системы, и в то же время является  логическим про дол -
же нием его технических средств. 
Сфера применения того или иного компьютера определяется созданным
для него  программным обеспечением. Сам по себе компьютер не обладает
зна ниями ни в одной области применения – все эти знания скон цен три ро ва -
ны в выполняемых на компьютерах программах. 
Программное обеспечение современных компьютеров включает мил ли -
оны программ – от игровых до научных. 
Все компьютерные программы можно условно разделить на три ка те го -
рии: системные программы, прикладные программы и инструментарий
прог раммирования.
Системные программы. Системные программы предназначены для
управления ресурсами компьютера – центральным процессором, памятью,
устройствами ввода-вывода – и предусмотрены для всех пользователей без
Прикладные программы Инструментарий программирования
Программное обеспечение
Системные программы
1.1.
4
исклю чения. Системные программы обеспечивают эффективную работу
прик ладных программ.
Среди системных программ особое место занимают операционные сис -
те мы – они составляют основу системного программного обеспечения. Это
один из важнейших элементов персонального компьютера. Операционная
сис тема – это система программ, обеспечивающих запуск компьютера, сла -
жен ную работу всех его частей и управление информацией.
В функции операционной системы входят:
• осуществление диалога с  пользователем;
• запуск устройств оперативной и постоянной памяти;
• управление компьютером;
• запуск программ на выполнение. 
Когда-то в компьютерах типа IBM PC использовалась по большей части опе -
ра ционная система MS-DOS, выпущенная фирмой Microsoft. При работе с этой
сис темой пользователь мог решать только какую-то одну конкретную задачу.
В наши дни в персональных компьютерах используются многозадачные
опе рационные системы: микропроцессор распределяет ресурсы компью -
тера од новременно между несколькими программами и задачами, имеющи -
мися в памяти компьютера. К таким операционным системам относятся
OS/2, MacOS, UNIX, Linux, Windows XP, Windows Vista и др.
Другую важную часть системных программ представляют утилиты (лат.
“utilitas” – польза, выгода). Они дополняют операционную систему и по -
вы шают ее возможности. В частности, они самостоятельно решают не ко -
то рые важные задачи. Вот некоторые виды утилит:
• интерфейсные программы;
• антивирусные программы;
• программы-архиваторы;
• программы-оболочки;
• программы, тестирующие работоспособность компьютерных ус -
тройств;
• программы, управляющие работой устройств (драйверы) и др.
5
Прикладные программы. Прикладная программа – это программа,
спо соб ствующая решению какой-либо задачи в пределах данной проблем -
ной об ласти. 
В наши дни существуют сотни тысяч прикладных программ для
персональных компьютеров. Вот наиболее популярные из них:
• текстовые редакторы (процессоры);
• программы для обработки табличных данных (электронные
таблицы);
• издательские системы;
• системы управления базами данных;
• программы для подготовки презентаций;
• графические редакторы;
• программы статистического анализа данных;
• компьютерные игры, обучающие программы и т.д.
Инструментарий программирования. Программы, от но ся щие к
это му классу, предназначены для создания системного и прик ладного прог -
рам много обеспечения. Для создания прог рам мно го обеспечения ис поль -
зуются языки программирования Basic, C++, Pascal, Java и другие. На базе
этих языков раз ра бо та ны системы создания прог рам много обес пе чения:
Visual Basic, Visual C++, Delphi. Для обучения детей основам прог рам ми ро -
ва ния во многих учебных заведениях мира используется язык LOGO.
1. Назовите основные категории программного обеспечения.
2.  Каково предназначение системных программ?
3.  Что такое операционная система?
4.  Для чего применяются прикладные программы?
5.  Что подразумевается под инструментариями программирования?
1. Язык программирования PASCAL
6
ЯЗЫКИ ПРОГРАММИРОВАНИЯ
Чтобы объяснить что-то человеку, язык которого ты не знаешь, при ме -
 няют либо язык жестов, либо слова из известного данному человеку языка.
У цен трального устройства компьютера – процессора тоже есть соб ствен -
ный язык. 
Машинный язык. Для непосредственного “общения” с компьютером
ис пользуется машинный язык (“machine language”), представляющий со бою
набор цифр. Именно цифрами кодируются и выражаются все команды для
процессора. Скажем, 1 обозначает  сложение, 2 – умножение, 3 – де ле ние и
т.д. (или, соответственно, 01, 02, 03). Для выполнения той или иной опе -
рации процессору необходимы не только команды, но и данные. Вот уп ро -
щен ный общий вид некой абстрактной, примерной команды для про цес сора:
Аргументы команд программирования, то есть данные, называются
операндами. 
Каждое данное размещается в ячейках памяти компьютера. Вся память
ком пьютера поделена на ячейки, у каждой из которых имеется свой номер –
адрес. Таким образом, каждый операнд характеризуется двумя параметрами
– значением и местом в памяти.
Запись “00хх” обозначает само число хх, а запись “01хх” – значение
ячейки хх в памяти. То есть, если перед данными “хх” стоит “00”, то это
сами данные, а если “01”, то это их местоположение. 
Тогда программу для вычисления среднего арифметического чисел,
находящихся в ячейках 01 и 02, можно представить следующим образом:
В переводе на обычный язык верхняя строчка выглядит так: “Сложить
данные, находящиеся в ячейках 01 и 02, и записать результат в ячейку 03”.
Нижняя же строка будет выглядеть так: “Разделить данные, находящиеся в
ячейке 03, на 2 и записать результат в ячейку 03”.
Запись этой программы в одну строку выглядит так:
0101010102010303010300020103     
Как видно, даже столь простая программа в записи на машинном языке
представляет собой “тайну за семью печатями”. В реальных компьютерах же
программы в машинных кодах намного сложнее. 
При записи данных в ячейку памяти предыдущая информация в ней стирается.
01 0101 0102 0103
03 0103 0002 0103
код команды   первый операнд   второй операнд номер ячейки, в которую будет помещен результат 
1.2.
7
Составить программу с помощью такого кода и проверить ее очень сложно.
Для этого нужно либо помнить коды и форматы всех команд, либо каждый раз
сверяться со специальными таблицами.
Малейшая небрежность при кодировании, ошибка в записи, путаница в
цифрах могут привести к самому неожиданному результату. Найти ошибку
при этом нелегко, ибо программист имеет дело не с алгоритмом, на пи сан -
ным на более-менее понятном языке, а с набором цифр.
Программисты на протяжении нескольких лет искали пути облегчения
своего труда. Необходимо было разработать такой инструмент, с помощью
которого можно было бы писать программы, не расходуя время на мелкие
де тали, и чтобы программисты могли бы заниматься исключительно твор -
чес кой работой, то есть создавать алгоритмы, а прочую работу оставить
ком пьютеру. 
Assembler. Программирование посредством машинных кодов – зан я -
тие весьма кропотливое. Простейшие вычислительные операции (нап ри -
мер, загрузка числа из памяти в процессор, сложение его с другим числом,
за пись полученного результата обратно в память) приобретают при этом та -
кую сложную форму, что данный процесс можно сравнить с возведением
ги гантского здания из маленьких кирпичиков.
Первым шагом к решению этой проблемы стала замена команд
символами, то есть команды стали представлять обычными сокращенными
Название языка Assembler происходит от англ. “assemble” - “складывать,
собирать”.
“Многозначность  толкования”
Как было бы хорошо, если бы команды компьютеру можно было бы давать на
обычном русском, английском, французском, турецком или любом другом
языке! Но, к сожалению, пока компьютеры не понимают  нюансы человеческой
речи. Ведь люди дополняют свою речь жестами и мимикой, применяют
метафоры, иносказания, иронию и прочие приемы обогащения речи – это дает
возможность говорить одно, имея в виду совсем другое. Человек часто
использует слова и выражения, имеющие несколько значений, уточняя кон крет -
ное значение того или иного слова в зависимости от  контекста, интонации и
про чих обстоятельств. Даже в письменной речи применяются намеки, по мо га -
ющие правильно воспринять смысл написанного.
Человеческий разум способен разгадывать загадки естественного языка, тогда
как компьютеру доступна только математически выверенная, строгая система
общения, в которой каждый символ или группа символов имеют только одно
значение, каждое предложение досконально понятно, а любого рода намеки и
двусмысленности недопустимы.
Под “машинным кодом” подразумевают программу, написанную на машинном
языке.
1. Язык программирования PASCAL
8
словами. Воплощение в жизнь этой прос той
идеи улучшило восприятие програм мистами
создаваемых программ, уменьшило число оши -
бок, облегчило труд программистов. 
Запись команд при помощи символов на зы -
ва ется мнемоническим письмом. Рассмотрим
при мер программы, записанной при помощи
дан ной системы.
Первая строка этого фрагмента означает то,
что необходимо проСУМмировать со дер жи мое
ячеек 1 и 2, и полученный результат поместить
в ячейку 3. Вторая строка указывает на то, что
необходимо разДЕЛить содержимое ячей ки 3
памяти компьютера на 2 и полученный ре зуль -
тат поместить в ту же ячейку 3. Как видно, та -
кая запись более понятна, чем при ве ден ная
выше запись тех же действий при помощи ма -
шинного кода. 
Это стало первым шагом к созданию языка
прог раммирования, понятного как человеку, так
и компьютеру.
Вторым шагом стало создание библиотеки
про цедур, то есть возможность использования
ко дов многократно – до того каждому прог рам -
мис ту приходилось каждый раз заново “от кры -
вать для себя Америку”. Библиотека процедур
поз волила программистам составлять новые
слож ные программы качественно и быстро.
Эти два направления стали залогом создания
и развития новых языков программирования.
Assembler избавляет программиста от самой тру доемкой  части его
работы – перевода мне мо нических команд в машинный код вручную. Тем
не менее, у языка Assembler есть два крупных недостатка. Об одном из них
вы, наверное, уже догадались: он состоит в том, что работа на этом языке
требует от программиста огромной внимательности и терпения, ведь для
непосредственного управления процессором предусмотрено великое
множество мелких операций.
СУМ X1, X2 > X3 
ДЕЛ X3, 2 > X3
Грейс Муррей Хоппер 
(1906 – 1992)
В 1952 году в США Грейс
Хоппер (Grace Murray Hop -
per) изобрела первый в мире
мнемонический язык прог -
раммирования – язык
Assem bler (assembly lan-
guage). Он включал в себя
сис тему мнемониче ских ко -
манд, библиотеку процедур
и специальную програм му
для преобра зо вания текс тов
команд в машинный код.
Процедура перево да про -
граммы на машинный язык
называется компил яцией, а
выполняющая ее программа
– ком пил я то ром (этот тер -
мин также при надлежит
Грейс М.Хоппер).
“mnemoni kon”  с
греческого означает
способность
“запоминать”.
9
Второй недостаток заключается в том, что программы, написанные на
язы ке Assembler, не являются “переносимыми” (portable). Например, прог -
рам му на языке Assembler, написанную для процессора Intel 8080, не воз -
мож но использовать на компьютере с процессором Motorolla 6800 – для это -
го процессора ее придется переделать. Правда, это не такая уж сложная за -
да ча, но все же необходимо проделать определенную работу.
1. Что такое машинный язык?
2. Что такое Assembler и в чем состоит его преимущество перед машинным
языком?
3. Каковы недостатки языка Assembler? 
4. Что подразумевается под “переносимыми” программами?
ЯЗЫКИ ВЫСОКОГО УРОВНЯ
Язык Assembler, хотя и был мнемоническим, но все же не удов лет вор ял
нуждам уче ных, которые были основными пользователями ком пью те ров на
заре ком пьютерной эры. Причина состояла в том, что, как уже ука зы валось
вы ше, этот язык был труден для изучения, так как по сути сво ей он близок
к ма шинному коду. Кроме того, у каждого процессора был “свой
Assembler”, в результате чего пользователю, работающему на нес коль ких
машинах, при хо дилось порой знать “несколько разных языков Assembler”.
В довершение все го, при программировании на этом языке при хо дилось
представлять себе весь процесс, вплоть до мельчайших деталей, ука зывая
сложные формулы в ви де последовательности различных опе ра ций. Однако
программист опе ри ру ет в уме общими категориями – “вы чис лить фор му -
лу”, “вывести число на экран”, “повторить операцию 10 раз”, и т.д.
Для решения этой проблемы были необходимы новые языки програм ми -
ро вания. При создании этих языков, в отличие от языка Assembler, основ ной
целью было добиться не того, чтобы они были понятны машине, а того, что -
бы они были удобны для человека, работающего с машиной.
Все прочие языки программирования, кроме языка Assembler, именуют языками
высокого уровня. Но это не говорит о том, что они все находятся на одном и том
же уровне – уровень одного из них может быть выше или ниже, чем у другого.
Понятие “язык высокого уровня” подразумевает лишь степень бли зос ти данного
языка к человеческому языку.
Представим такую картину. Вы набираете на клавиатуре фразу “Подсчитать при -
были и убытки за текущий год, подготовить годовой отчет, снять с него нес коль -
ко копий и разослать их по нужным адресам” – и компьютер тут же ис пол ня ет
все эти ваши указания! Увы, современные языки программирования пока да леки
от подобного идеала…
1.3.
1. Язык программирования PASCAL
10
Начали создаваться новые языки, более понятные человеку (програм -
мис ту) и облегчающие процесс программирования. Каждый создатель язы -
ка программирования воплощал в своем творении собственные предс тав ле -
ния о диалоге между человеком и  машиной, и потому в течение достаточно
ко роткого периода появились сотни новых языков (так, за период с 1950 по
1993 год их возникло более тысячи). Естественно, лишь небольшая часть
этих языков высокого уровня (high-level)  получила дальнейшее развитие и
рас пространение. В отличие от них всех, Assembler считается языком  низ -
кого  уров ня (low-level) , так как он более близок к машинному языку и ра -
бо та ет с компьютерными устройствами. 
У языков высокого уровня  имеются свои достоинства и недостатки.
Пер вейшее преимущество языков высокого уровня перед языком Assembler
– то, что их очень легко изучать и применять. Программы, на пи сан ные на
этих языках, более компактны и легки для понимания, чем прог рам мы на
языке Assembler, они по большей части “переносимые”, то есть оди наково
работают на компьютерах с разными процессорами. А это зна чит, что для
их написания не нужно знать нюансы архитектуры компьютера, на котором
они будут использоваться. Естественно, что в таком случае у каж дого
процессора должен быть свой компилятор. Исполняемые файлы, соз да -
ваемые этим компилятором, пригодны только для данного процессора.
Какой язык программирования  лучше?
У каждого языка программирования есть свои приверженцы и противники. 
В наши дни существуют несколько тысяч языков программирования. Как среди
этого количества  языков выбрать наиболее удобный?
Инженеры, банкиры, военные решают множество разнообразных задач, для чего
выбирают те или иные языки программирования. Инженеры отдают пред поч те -
ние языку FORTRAN, банкиры обычно используют COBOL, военные же пишут
прог раммы планирования и управления войсками на языке ADA. Ученым, ра бо -
таю щие в сфере искусственного интеллекта, больше всего подходят языки
PRОLOG и LISP. Программисты, пишущие программы для Интернета, обычно
пред по читают язык JAVA.
Все перечисленные языки программирования – специальные. В каждом из них
имеются такие операторы, при помощи которых наиболее удобно решать те или
иные задачи. Наряду со специальными, существуют также универсальные
языки. С их помощью можно решать практически любые задачи. Из таких
языков наиболее популярны три: 
• Basic 
• Pascal
• C++    
Схема эволюции языков высокого уровня 
111. Язык программирования PASCAL
С другой стороны, программы, написанные на языке Assembler, на прак -
ти ке оказываются более продуктивными, чем написанные на языках вы со -
ко го уровня. Исполняемые файлы, создаваемые компиляторами языков вы -
со кого уровня, занимают больше места и медленнее работают, чем ана ло -
гич ные по свойствам программы, написанные на языке Assembler. Правда,
в последнее время в результате развития микропроцессоров компиляторы
ге нерируют более оптимальные коды. 
1. Что означают понятия “языки программирования высокого уровня” и
“языки программирования низкого уровня”?
2. В чем преимущество программирования на языках высокого уровня перед
программированием на машинном языке?
3. Разъясните преимущества и недостатки языков высокого уровня.
4. Как вы себе представляете  язык программирования самого высокого уровня?
При помощи языков высокого уровня можно программировать в любой области.
Однако существуют и такие  языки, которые предназначены для использования в
конкретных областях: 
• ALGOL – для математических задач
• CHILL – для систем телекоммуникаций
• COBOL – для экономических задач
• FOPTRAN – для математических расчетов
• Java – для работы  с объектами
• Linda – для параллельной обработки данных
• PostScript – для изображения макетов
• PROLOG – для решения задач в области искусственного интеллекта
12
РАЗРАБОТКА ПРОГРАММ
Теория программирования развивалась параллельно с практическим
прог раммированием. На первом этапе развития была разработана ма те ма -
ти чес кая теория обработки информации и в тот же период разработаны
сред ства проверки правильности программ и принципы создания эф фек тив -
ных транс ляторов.
В то время на программистов смотрели как на высокоспе ци али зи ро ван -
ных работников. Это была одна из редких профессий,  и создание программ
тогда еще  не носило массовый характер.
Развитие и распространение компьютеров привело к пе ре но су центра тя -
жес ти в прикладную сферу. Число программистов и соз дан ных ими прог -
рамм начало исчисляться миллионами. Наряду с этим упал уро вень зна ний,
определяющий специализированных программистов. Пос те пенно в соз -
дании сложных программ все больше стали принимать участие прог рам -
мис ты среднего уров ня.
Разработка небольших и средних по размеру программ. Не -
боль шую и среднюю по размеру программу (состоящую из нескольких ты -
с яч строк) могут разрабатывать независимо друг от друга несколько прог -
рам мистов. Обычно этот процесс состоит из двух этапов:
Первый этап  – стадия анализа. На этой стадии определяется назначение
прог рам мы, разрабатывается алгоритм решения данной задачи, определ яют -
ся структура дан ных, объекты программы и выясняются связи между ни ми.
Второй этап – этап кодирования. На этой стадии  алгоритм пишется на
кон крет ном языке программирования. Для небольших программ  – это ос -
нов ной этап, требующий максимального труда. Тестирование и отладка
прог рамм не тре буют большого труда. На выполнение этих этапов одним
прог раммистом мо жет уйти около полугода.  
Разработка больших программ. Большие программы могут со дер -
жать несколько миллионов строк. Над их созданием трудятся совместно
дес ятки, а порой сотни программистов в течение нескольких лет.
Этапы создания программ:
1. Постановка  и анализ задачи.
2. Разработка технического задания.
3. Проектирование и кодирование.
4. Тестирование и отладка.
5. Внедрение.
6. Сопровождение программы.
1.4.
1. Язык программирования PASCAL 13
14
На первом этапе  проводится анализ требований, предъявляемых к про -
екту. Эта одна из важных стадий для успешного выполнения проекта. Без -
успешность некоторых больших проектов связана именно с ошибками, до -
пущенными именно на этой стадии. В процессе анализа требований
уточняется наз начение программы, определяются входные и выходные
данные. Про во дит ся оценка необходимых ресурсов и стоимости проекта.
На следующем этапе составляются спецификации программы. На этой
ста дии формируются технические задания для программистов, под го тав ли -
ва ются рабочие документы и строится календарный план работ.
Затем начинаются работы по проектированию и кодированию прог рам -
мы. В больших проектах это не основной этап разработки программы.
По окончании кодирования (в некоторых случаях даже заранее) про во -
дят ся тестирование и отладка программы. В процессе тестирования про -
вер яется правильность программы, ее производительность, надежность ра -
бо ты в критических режимах, работа при некорректных входных данных и
Интерпретаторы. Компиляторы
Для того, чтобы программу, написанную на языке высокого уровня, мог понять и
выполнить центральный процессор компьютера, она должна быть переведена на
машинный язык. Это преобразование может быть произведено различными способами.
Первый способ заключается в запуске программы, которая  переводит (транслирует, от
англ. translate)  каждую строку программы на машинный язык. Эта программа переводит
одну строку программы на машинный язык, передает ее центральному процессору и
только после этого начинает переводить следующую строку. Такая программа называется
интерпретатор (англ. interpreter).
Эту программу можно сравнить с переводчиком, который помогает общаться  людям,
говорящих на разных языках. Один человек что-то говорит, переводчик переводит
сказанное. Второй собеседник отвечает, и его слова переводчик переводит первому
собеседнику. Этот процесс продолжается в течение всего разговора.
Преимущество такого подхода – простота восприятия пользователем. Сразу после
написания и запуска программы можно видеть, что делает компьютер на каждом этапе.
Если нужно что-то поменять в программе, то производятся изменения, и программа
заново транслируется. Но существует недостаток такого подхода: даже после того как
программа уже готова, прежде чем ее выполнить, транслятор переводит каждую строку
программы в машинный код и в результате общее время выполнения программы
увеличивается.
Проведем другое сравнение. Для того чтобы  перевести этот учебник  на английский
язык, издательство заключает соглашение с переводчиком, и тот переводит книгу  на
английский язык целиком. Другой вид транслятора – компилятор (англ. compile –
компоновка, составление) работает именно таким образом: он читает программу,
написанную на языке высокого уровня, переводит ее полностью в машинный код  и
сохраняет в отдельном файле. Независимо от того, на каком языке был написан исходный
код, сохраненный файл можно выполнять многократно. Понятно, что нет необходимости
каждый раз транслировать программу.
15
устойчивость при технических неполадках. Выявленные в процессе тес ти -
рования ошибки  устраняются программистами. 
Если программа написана с учетом требований конкретного заказчика,
то этап внедрения обязателен. На этом этапе  настраивается оборудование,
дан ные, использованные в других программах, переносятся в программу,
пер сонал, который будет работать с данной программой, проходит обу че ние.
Последним этапом является этап сопровождения программы. На этом
этапе даются советы пользователям, исправляются обнаруженные в про цес -
се эксплуатации ошибки,  а также дается информация  о новых, усо вер шен -
ство ванных версиях программы.
1. Каковы этапы разработки больших программ?
2. В чем состоит предназначение транслятора?
3. Чем отличается работа компилятора от работы интерпретатора?
1. Язык программирования PASCAL
16
РЕДАКТОР TURBO PASCAL 
Язык  Pascal (читается как “Паскаль”) известен  и используется сейчас
под именем  Turbo Pascal. В этом разделе мы будем изучать язык  Pascal пос -
ред ством TURBO PASCAL 7.0,  созданного  компанией Borland International.
У Turbo Pascal есть версии как для операционной системы MS-DOS, так и
для операционной системы Windows.
Запуск Turbo Pascal. Программный продукт Turbo Pascal представ -
ляет со бой интегрированную среду. Это значит, что находясь в Turbo Pascal,
мож но создать, отредактировать, откомпилировать, скомпоновать и
загрузить прог рамму. 
Для загрузки программы Turbo Pascal необходимо в папке BP (точ нее, из
папки BIN, находящейся в BP) запустить программу turbo.exe  или bp.exe. В ре -
зультате на экране  появится  окно, показанное на ри сун ке.
Никлаус Эмиль Вирт (1934)
Язык программирования Pascal был разработан в 1971
го ду швейцарским ученым Никлаусом Виртом. Pascal
был назван в честь французского философа и
математика XVII века Блеза Паскаля. Это один из
наиболее распространенных языков программирова-
ния. Среди других языков он выделяется простотой и
логичностью  в написании программ и поэтому поль-
зуется популярностью как среди начинающих, так и
среди опытных программистов.
Никлаус Вирт является также создателем таких
языков, как MODULA и OBERON.
1.5.
17
В  верхней части окна  расположено главное меню программы (File,
Edit, Search и др.). Для выбора одного из пунктов главного меню надо
навести ука затель мыши на нужный пункт и щелкнуть левой кнопкой.  Тот
же ре зуль тат можно получить, если нажав и удерживая  клавишу <Alt> на
кла виа туре, нажать клавишу с буквой, первой в названии нужного пункта
(нап ри мер, <Alt+F> для File) и затем отпустить обе клавиши.
Создание новой программы. Для того, чтобы приступить к соз да -
нию новой Pascal-программы, необходимо открыть в рабочей области пус -
тое окно редактора. Для того, чтобы открыть такое окно, достаточно в меню
File выбрать пункт New. В результате появится новое окно редактора с име -
нем NONAME00.PAS. Впоследствии при создании новых файлов им будут
ав томатически присвоены имена NONAME01.PAS, NONAME02.PAS и т.д.
Не надо забывать, что созданный таким образом файл хранится в опе ра тив -
ной памяти компьютера. В дальнейшем этот файл необходимо сохранить  во
внешней памяти компьютера.
Редактор Turbo Pascal обладает достаточными возможностями для на бо ра
и редактирования  текста программы. Текст программы, как и в любом текс -
товом редакторе, вводится с помощью клавиатуры. Основной текст прог -
раммы высвечивается желтым цветом, ключевые слова, как элементы языка
Pascal, – белым цветом (эти цвета можно изменить, выбрав в ос нов но м меню
пункт OptionsEnvironmentColors). Выделение цветом клю че вых слов
помогает избежать некоторых оши бок при наборе текста программы.
После завершения ввода программы ее следует сохранить на диске. Это
же лательно сделать не только  в конце работы, но и в процессе набора прог -
рам мы. Для сохранения программы выберите пункт Save в меню File либо
1. Язык программирования PASCAL
нажмите клавишу <F2>. До этого ваша программа фигурировала в сис теме
Turbo Pascal под именем NONAME00.PAS. Прежде чем сохранить прог -
рамму под этим именем, редактор дает возможность указать более со дер -
жательное имя (например, HELLO.PAS). 
Компиляция и запуск программы. После того, как текст прог рам -
мы набран, его надо откомпилировать. Для этого служит пункт Compile в
од ноименном меню. После этого Turbo Pascal приступает к компиляции
прог раммы, содержащейся в окне редактора. Если в программе будет най -
де на ошибка, редактор выведет сообщение об ошибке. При этом кур сор
будет находиться в той позиции программы, где произошла остановка ком -
пиляции. Исправив ошибку,  следует заново выбрать пункт Compile в од -
ноименном меню. Если в программе уже нет ошибок, то появится окно с со -
общением: Compile successful: Press any key
(Компиляция прошла успешно; нажмите любую клавишу) 
Чтобы вернутся в окно редактора, достаточно нажать какую-либо клавишу
на клавиатуре.
18
Теперь, для того чтобы запустить (на выполнение) только что от ком пи ли -
ро ванную программу, следует выбрать пункт Run в одноименном меню. В
результате на короткое время появится экран пользователя. 
Для того, чтобы не спеша рассмотреть этот экран, можно вос поль зо вать -
ся комбинацией клавиш <Alt+F5>. Снова появится экран пользователя и ос -
танется перед вами, пока вы не нажмете какую-либо клавишу на кла ви а ту ре.
Загрузка ранее сохраненной программы. Для того, чтобы загру -
зить в окно редактора ранее сохраненный на диске  файл, следует вызвать на
экран диалоговое окно Open a File. Для этого нужно выбрать пункт Open в
меню File либо нажать клавишу <F3>. После появления указанного
диалогового окна требуется либо ввести имя нужного файла в поле Name,
либо выбрать имя этого файла в списке Files. 
Выход из Turbo Pascal. Для того, чтобы выйти из Turbo Pascal и вер нуть -
ся в среду операционной системы, необходимо выбрать пункт Exit в меню File.
Если выбран этот пункт, а в окне редактора открыт еще не сохраненный файл,
система предоставит возможность сохранить этот файл на диске. Для этого на
экране появится специальное диалоговое окно. 
Если теперь нажать на клавиатуре клавишу <Y>, перед выходом из Turbo
Pascal файл будет сохранен.
1. Что такое интегрированная среда?
2. Как определить ошибки, имеющиеся в программе?
3. Как запускается программа на выполнение в среде Turbo Pascal?
4. Как можно  просмотреть результаты программы после ее выполнения?
1. Язык программирования PASCAL 19
ОБЩАЯ СТРУКТУРА ПРОГРАММЫ
Любая программа, написанная на языке Pascal, состоит из двух частей –
раздела описания переменных и тела программы. 
В тексте программы раздел описания переменных предшествует телу
программы.
Данные обрабатываются с помощью операторов. С операторами более
под робно вы познакомитесь на следующих уроках. 
Тело программы начинается со слова begin и содержит набор операторов.
Поэтому иногда этот раздел называют разделом операторов. Этот раздел за -
кан чивается ключевым словом end. (с точкой). Программу на языке Pascal в
общем виде можно представить так:
program < имя программы >;
< описание переменных >
begin
< операторы >
end.
Программу  можно написать в одной строке или же в нескольких  стро -
ках – от этого ее смысл не меняется (только нельзя переносить слова с
одной строки на другую). Надо стараться, чтобы программы были написаны
как можно понятнее.
Комментарии. При написании программы вы ясно представляете цели
ее написания. Но по истечению некоторого времени, вернувшись к прос -
мот ру программы, станет ясно, что некоторые детали вы подзабыли. Поэ то -
му, чтобы сделать программу понятнее как для вас, так и для других, це ле -
со об разно в некоторых ее местах поставить комментарии.
BLAISE PASCAL
BEGIN
(* 1623 – 1662 *)
END.
Как видно из названия, комментарии – это заметки для читающего текст
программы. Комментарии можно использовать, чтобы указать назначение
Любой объект, встречающийся в программе,  должен быть заранее описан в
разделе переменных!
1.6.
20
программы, сведения об авторах программы, дату последних изменений в
ней, назначение переменных, функций и т.д.
Комментарии в программе Pascal пишутся между символами  (* и   *),
или же между символами { и }. Следует отметить, что компилятор иг но ри -
ру ет комментарии и не транслирует их на машинный язык. 
program Words
{
Разработчик: Алпай Джалаллы
Дата создания программы: 13.05.2009
Эта программа определяет количество слов
в тексте.
}  
program Comments;
(* простая программа, показывающая применение
комментариев *)
var a : Integer;
begin (* начало *)
a:= 1;
WriteLn(‘Это все будет напечатано, a=’, a)
{ нет необходимости ни в одном из этих
комментариев }
end.
Идентификаторы. Для того, чтобы именовать различные объекты,
например переменные, константы, функции и т.д., в языках программиро -
вания используют идентификаторы. Несмотря на то, что правила записи
идентификаторов различны в различных языках программирования, все же
существуют основные принципы выбора идентификаторов: 
1. Идентификатор должен представлять собой комбинацию только букв
и цифр и начинаться только с буквы.
2. В идентификаторе нельзя использовать пробел и знаки препинания.
Можно использовать некоторые символы, такие как “_” , или же   “$”.
Комментарии всегда находятся либо между скобками со звездочками, либо между
фигурными скобками.: 
(*...*) 
{…}
1. Язык программирования PASCAL 21
3. Во всех языках программирования для записи операторов языка су -
щес твуют ключевые слова. Ключевые слова  не могут исполь зоваться
в качестве идентификаторов.
4. Идентификатор может быть записан как прописными, так и строч ны -
ми бук вами. Идентификаторы, записанные прописными и строч ны ми
бук вами, по-разному распознаются в языках программирования.
Например, иден тификаторы Sum и sum считаются одинаковыми в
языках  BASIC  и  Pascal, но различными в языке С.
Примеры возможных идентификаторов приведены ниже:
i
a
t0123456789
NoClass
Нельзя использовать нижеприведенные идентификаторы:
1stPlace – начинается с цифры; 
one and one – имеется символ пробела;
yes(no)– наличие скобок.
Идентификаторы можно разделить на две категории:
1) стандартные идентификаторы;
2) идентификаторы, определенные пользователем.
Все указанные до этого идентификаторы относятся ко второй группе. К
стандартным идентификаторам можно отнести процедуры язы ка – ReadLn,
WriteLn, Real и др.
Переменные. Стандартные типы. Назначение раздела описаний
Pascal – программы состоит в том, чтобы сообщить компилятору имена всех
идентификаторов пользователя, описанных в  программе, а также указать,
как может быть использован тот или иной идентификатор. Кроме того,
данный раздел сообщает компилятору, какие данные будут содержаться в
каждой ячейке памяти, используемой в программе.
Представление конкретного значения в памяти зависит от типа данных
этого значения. В стандартном Pascal существует  четыре предопре делен -
ных типа данных. Это Real (предназначенный для вещественных чи сел),
Integer (для целых чисел), Char (для отдельных символов) и   Boolean (для
величин, принимающих всего два  значения: True и  False). Turbo Pascal
предоставляет еще один тип данных – string, о  котором  пой дет разговор на
другом уроке. Для каждого типа данных существует свой на бор
допустимых значений и операций.
22
Тип данных Integer. В математике целые числа могут быть
положи тельными или отрицательными. Для представления целых
чисел в Pascal- программе и предназначен тип данных Integer. Turbo
Pascal способен ма ни пу лировать значениями этого типа от -32768 до
32767. Существует пре до пре деленная константа  MaxInt , значение
которой соответствует наи боль ше му значению типа Integer (т.е.
MaxInt = 32767) и которую можно ис поль зо вать в программах. Вот
примеры значений типа Integer: 
-1050   425    15      -25   
Целочисленные значения можно выводить на экран, выполнять над
ними арифметические операции (сложение, вычитание, умножение и
деление), а также сравнивать их.
Тип данных Real. Всякое вещественное число состоит из целой и
дроб ной частей, которые  разделены десятичной точкой.  В Pascal для
пред ставления вещественных чисел предназначен тип Real, который
начинается и заканчивается цифрой. Поэтому, чтобы дробь – .25  и
целое число 64. можно было отнести к типу Real, они должны быть
представлены как – 0.25 и 64.0 соответственно.
Вещественные числа можно считывать и отображать на экране, вы -
пол нять над ними арифметические операции (сложение, вычитание,
ум ножение и деление), а также сравнивать их.
Тип данных Char. Значения типа Char представляют собой от -
дель ные символы – буквы, цифры или специальные знаки, которые
заключены в апострофы:
‘A’, ‘z’, ‘1’, ‘:’, ‘”’, ‘ ’
Здесь предпоследний знак – это символ  “  ( кавычки), а последний
– пробел.
Арифметические операции над значениями типа Char невозмож -
ны. Другими словами, операция  ‘3’ + ‘5’  в Pascal недопустима. Мож -
но сравнивать символы, а также считывать и выводить их на экран.
Тип данных Boolean. В отличие от других типов данных, тип
Boolean допускает только два значения:  True (истина) и   False (ложь).
Данные этого типа могут быть использованы для условных значений,
позволяющих программе принять некоторое решение. Значения типа
Boolean можно  выводить на экран, однако такое значение нельзя
ввес ти с клавиатуры. Над этими типами данных можно выполнять
опе рации   not (не), and (и) и or (или).  
1. Язык программирования PASCAL 23
Операции отношения. Над целыми числами можно производить опе -
ра ции отношения, результатом которых является логическое значение. Опе -
ра ции отношения бывают следующие:
=     равно < > не равно
< меньше > больше
<= меньше или равно > = больше или равно
Эти операции применимы и к вещественным числам. К символьным ве -
ли чинам применимы только операции  = и < >.
Раздел описания переменных в программе. Этот раздел пред -
став лен в виде:
var описание1; описание2; описание3; ...
Здесь “var” — ключевое слово (сокращенное от англ. “variable”  — пе ре мен -
ная). Каждое “описание”  состоит из одного  или несколько иден ти фи ка то -
ров, разделенных между собой запятой, символом  “ : ” (двоеточие) и типа
этих идентификаторов (идентификатора). Оператор описания указывает
ком пьютеру,  какие переменные и какого типа  используются в программе.
Все переменные, имеющиеся в программе должны быть описаны, или
объявлены ( причем один раз!).
Выражения. Приоритет операций. В большинстве программ невоз -
мож но обойтись без арифметических выражений. Все арифметические опе -
ра торы, способы их записи и вычисления представлены в таблице.
var a, b, c : Real; c : Char; 
n, q1, MaxI : Integer;
flag : Boolean;
Термин “переменная” пришел в программирование из математики. В ма те ма ти -
ке широко используются понятия”переменная величина”, “зависимая ве ли чи -
на”. Зависимую величину называют еще функцией.  Помимо этого, в математике
ис пользуется понятие “аргумент”, что означает “независимая, са мос то я тель -
ная переменная”. Формула    
S = v · t
как в физике, так и в математике указывает на то, что величина S (путь) зависит
от независимых переменных  v (скорость) и  t  (время).
Вследствие того, что первыми создателями языков программирования были ма -
те матики, многие термины перешли в программирование именно из математики.
24
Каждый оператор манипулирует двумя операндами, которые могут пред -
став лять собой константы, переменные или арифметические выражения.
Операторы +, – , * и / могут использоваться со значениями типов Real и
Integer. Как показано в последнем столбце, при использова нии операторов
+, – и * тип получаемого результата совпадает  с типом операндов. Ре зуль -
тат применения оператора деления / всегда представляет собой ве щес твен -
ное число. Последние два оператора  (div и mod ) могут быть ис поль зо ва -
ны только с целыми числами.
Используя перечисленные выше операторы, можно составить вы ра же -
ние из констант (постоянная величина) и переменных. Например:
(a + b) / c
(MaxI * n + q1) div (n + q1)
(flag or not(a = b)) and (n <> q1)
При определении порядка вычислений выражений придерживаются
стан дартных правил старшинства операций: первыми выполняются опе ра -
ции в скобках; затем операции умножения, деления и вычисления остатка;
в завершение — операции сложения и вычитания.
1. Что такое идентификатор?
2. Что из нижеперечисленного не является идентификатором? Ответ обоснуй.
end  ReadLn program 123XYZ XYZ123
Y=Z  ‘Max’ Ay01 Ay_01 1 Ay
3. Из каких основных частей состоит Pascal-программа?
4. Каков порядок наименования переменных?
5. Исправьте синтаксические ошибки в комментариях.
{ Это комментарий *)
{ Это тоже {похоже} на комментарий }
Арифметический оператор Действие оператора Примеры
+ Сложение
5 + 2 равно 7
5.0 + 2.0 равно 7.0
– Вычитание
5 - 2 равно 3
5.0 - 2.0 равно 3.0
* Умножение
5 * 2 равно 10
5.0 * 2.0 равно 10.0
/ Вещественное деление
5 / 2 равно 2.5
5.0 / 2.0 равно 2.5
div Целочисленное деление 5 div 2 равно 2
mod Вычисление остатка 5 mod 2 равно 1
1. Язык программирования PASCAL 25
ОПЕРАТОРЫ
Программы, написанные на языке Pascal, состоят из описания
переменных и различных операций, производимых над ними – операторов.
Данные обрабатываются при помощи операторов. Операторы бывают
двух видов: неисполняемые (для описания структуры данных и программы)
и исполняемые (для выполнения различных операций). Вы уже знакомы с
оператором описания переменных. Ниже вы познакомитесь с испол ня емы -
ми операторами.
Оператор присваивания. Для задания значений переменным или
для их изменения во всех языках программирования существует оператор
присваивания. Общий вид этого оператора таков:
<идентификатор> <символ присваивания> <выражение>
Слева от символа присваивания стоит идентификатор переменной, ко то -
рой присваивается новое значение. Символ присваивания различен для мно -
гих языков программирования. Например, для языков  BASIC и С символ
прис ваивания – это знак равенства ( = ), а в языке Pascal – это двоеточие и
знак равенства ( := ). 
Примеры операторов присваивания:
x := 5; переменной х присвоено число 5;
y := x; переменной у присвоено значение переменной х;
y := x + 10; переменной у присвоено значение, которое на 10
больше значения х;
x := x - 2; переменной х присвоено значение, меньшее на 2
предыдущего значения х;
y := y + 1; переменной у присвоено значение у, увеличенное на 1.
Операторы ввода и вывода. Во время работы программы все
данные, используемые в программе, хранятся в оперативной памяти.
program Happiness;
var
I, You, We: Integer;
begin
I := 1;
You := 1;
We := I + You;
end.
1.7.
26
1. Язык программирования PASCAL
Программа рассматривает данные, размещенные на других носителях, как
внешние данные. Получение данных от внешних источников называется
операцией ввода, передача же данных на внешние носители называется
операцией вывода.
Процедура WriteLn. Во многих программах, которые находятся во
взаим ной интерактивной связи с пользователем, используется оператор вы -
во да информации на экран. Для вывода данных на экран на языке Pascal
при меняется стандартная процедура WriteLn. Переменные и выражения,
ко торые необходимо вывести на экран, становятся параметрами этой про це -
ду ры.
WriteLn(‘Всего ’, a);
Этот оператор отображает на экране два элемента – строку ‘Всего ’
и значение переменной a. Если до выполнения этого оператора значение
переменной будет, например  2.345, то на экране отобразится
Всего 2.3450000000E+00
Для отображения вещественного числа, если это не указано иначе,
используется экспоненциальный формат Pascal.
Предположим, в программе имеется последовательность операторов:
WriteLn(‘Всего ’, a);
WriteLn;
WriteLn(‘Конец ’);
Эти операторы  при выполнении программы отобразят на экране строки:
Всего 2.3450000000E+00
Конец
У второго оператора здесь список вывода отсутствует, и поэтому он
выводит только пустую строку.
Итак, процедура WriteLn выводит значение  каждой переменной или
конс танты, представленной в списке вывода, а затем переводит курсор в на -
ча ло следующей строки. Если в списке вывода присутствует строка сим во -
лов, то она печатается без апострофов. Если список вывода отсутствует,
кур сор просто переводится в начало следующей строки.
Ввод – прием данных от внешних источников.
Вывод – передача данных на внешние приемники.
27
Процедура Write. В Pascal  имеется еще одна процедура для вывода
дан ных, а именно Write, которая совпадает с WriteLn во всех отношениях,
за исключением того, что после отображения списка вывода, курсор не пе -
ре водится в начало следующей строки. Так, пара операторов:
Write(‘Всего ’);
WriteLn(a);
эквивалентна одному оператору
WriteLn(‘Всего ’, a);
Процедура ReadLn. Для ввода данных с клавиатуры в Pascal
используется процедура ReadLn. Общий формат этой процедуры таков:
ReadLn(список ввода)
Процедура ReadLn считывает в память данные, которые пользователь
вводит с клавиатуры при выполнении программы. Для каждой переменной,
указанной в списке ввода, пользователь должен ввести один элемент данных,
а в конце нажать клавишу <Enter>. Имена переменных в списке ввода
разделяются запятыми. Порядок ввода данных должен со от вет ство вать
порядку, в котором переменные представлены в списке ввода. Вво ди мые
числовые элементы данных разделяются одним или несколькими про бе лами.
Запятые между данными  или внутри данных присутствовать не долж ны. 
var a, b: integer;
. . .
Write(‘Введите значение переменных: ’);
ReadLn(a, b);
Процедура Read. Еще одним средством ввода данных с клавиатуры
является процедура Read. Основное отличие между процедурами Read и
ReadLn состоит в том, что все избыточные символы в строке данных про -
це дурой Read не считываются ( эти символы могут быть считаны сле ду ю -
щей процедурой Read или ReadLn). А процедура ReadLn, напротив, об ра -
ба тывает все символы во вводимой строке, однако игнорирует при этом все
из быточные символы в конце строки.
Форматирование. Как было отмечено, если нет других указаний, Pascal
отоб ражает все вещественные числа в экспоненциальном виде. Как же мож -
но представлять данные в нужном нам формате? Проще всего указать фор -
мат переменной или значения типа Integer, которое должно быть вы ве де но
Pascal-программой. Для этого после имени переменной (или после зна -
28
чения) достаточно добавить двоеточие и число, указывающее ширину поля,
отводимого для этого числа. Если эта ширина меньше длины числа, то ши -
рина игнорируется. Операторы 
Write(‘a = ’, a:1);
WriteLn(‘ и b = ’, b:2);
указывают,  что для значения a отводится одна позиция, а для значения b –
две позиции. Например, если значение переменной a равно 7, а b равно 8,
то в этом случае вывод программы будет выглядеть так:
a = 7 и b =  8
Внимательно  вглядевшись, можно заметить дополнительный пробел пе -
ред значением переменной b. Это объясняется тем, что спецификация фор -
ма та :2 обеспечивает место для вывода двух цифр. 
Для того, чтобы задать формат вывода для переменной  или значения
типа  Real, необходимо указать как ширину поля, так и необходимое число
десятичных разрядов. Общая ширина поля должна быть достаточна велика,
чтобы вместить все разряды до и после десятичной точки. При этом одно
знакоместо необходимо выделить для десятичной точки и одно – для знака
минус, если данная переменная может принимать отрицательные значения.
Если Х – это переменная типа Real, которая может принимать значения
в пределах от -99.9 до 999.9, оператор
WriteLn(X :5 :1);
вы ведет значение Х с точностью до одного десятичного знака. В ни же при -
ве денной таблице показаны спецификации формата для целых и ве щес твен -
ных чисел.
Константы. Помимо переменных, для описания данных в программе
используются постоянные выражения (константы). На языке Pascal  имеется
возможность описывать константы и задавать им имена, которые
впоследствии используются в тексте программы вместо самих констант.
Значение Формат Вывод
234 :4 234
234 :5 234
234 :1 234
–234 :6 –234
3.14159 :5:2 3.14
3.14159 :5:3 3.142
0.1234 :4:2 0.12
–0.006 :8:3 –0.006
–0.006 :8:5 –0.00600
–0.006 :7:5 –0.00600
1. Язык программирования PASCAL 29
30
Константы описываются в разделе описания констант, начинающемся с
ключевого слова const:
const im1 = значение1;
im2 = значение2;
.........
imN = значениеN;
Здесь im1, im2,... – произвольные идентификаторы, значение1, зна че -
ние2, ... – записанные по правилам числа, символы, заключенные в апо -
стро фы, константы true, false. Например:
const g = 981E-2;
atmosfer = 0.76;
pi = 3.1415926;
Можно указать как минимум две причины, по которым желательно
иметь в программе константы.
Во-первых, традиция использования вместо постоянных величин букв
заимствована из физики и математики. Сохраняя  ее, программы становятся
более понятными. Задание константам осмысленных  имен – один из спо со -
бов комментарий в программе. Запись “длина_строки” более ин фор ма тив на,
чем запись  “60”.
Во-вторых, описание констант облегчает внесение изменений в
программу. Например, пусть значение длины строки, описанной в
программе, надо взять не 60, а 40. Для этого достаточно в разделе описания
констант изменить “длина_строки = 60” на “длина_строки = 40”. В
противном случае придется найти в программе все числа 60, удостовериться,
что это значение длины строки,  и поменять их на 40.
Определение нового типа данных. Программист помимо стан -
дарт ных типов данных имеет возможность задавать новые типы данных и
давать им имена. После этого их можно использовать как стандартные ти -
пы данных. Раздел определения типов имеет такой вид:
type im1 = описание1;
im2 = описание2;
.........
imN = описаниеN;
Здесь im1, im2,... – произвольные идентификаторы, а описание1,
описание2, ... – описание этих типов данных.
31
Инициализация переменных. Под  инициализацией переменных по -
ни мают присвоение начальных значений переменным до выполнения или
присвоение значений во время работы программы. На языке Pascal
переменную можно также инициализировать во время ее объявления.
Например:
const i: Integer = 3;
Этот оператор не является ни оператором ввода, ни оператором
присваивания, а i является фактически переменной, а не константой.
Переменная  i называется типизированной константой.
1. В чем заключается преимущество задания имен константам в программе?
2. Дан фрагмент программы:
const 
MyPi = 3.14159;
MaxI = 1000;
var
X, Y : Real;
A, B, I : Integer;
A := 3;
B := 4;
Y := -1.0;
Найдите допустимые  операторы и укажите их значения.
a) I := A mod B
б) I := (990 – MaxI) div A
в) I := B div 0
г) X := A / Y
д) X := MyPi div Y
е) I := (MaxI – 990) mod A
3. Чем отличается процедура WriteLn от процедуры  Write?  
4.  Запишите нижеследующие словесные алгоритмы соотвествующими опе ра -
то ра ми языка Pascal. 
Выберите произвольное число между 1 и 100.
Умножьте это число на само себя.
К полученному числу прибавьте выбранное число, умноженное на 4.
К результату прибавьте 3.
Разделите полученный результат на сумму выбранного числа и 3.
От частного вычтите  выбранное число.
Выведите ответ на экран.
1. Язык программирования PASCAL
32
ОПЕРАТОРЫ ВЫБОРА  IF   И CASE
При выполнении алгоритма команды обраба ты ваются последовательно,
одна за другой. Но в жизни ред ко встречаются такие задачи, где ко манды
вы пол ня ют ся последовательно. Для ре шения более сложных за дач
требуются гибкие ал горитмы, в которых пос ле до ва тельность выпол нения
шагов меняется.
В алгоритмах выбор одного из возможных действий
осуществляется с помощью ветвления. Ветвление
яв ля ется одной из основных алгорит мических
структур. Ветвление осно вывается на проверке
одного или нескольких условий, и в зависимости от
истинности этих условий выполняется опреде лен -
ное действие.
Во всех языках программирования предусмо тре ны
специальные опе раторы, обеспечивающие вет вле -
ние. Такие опреаторы называют условными опе -
раторами. Простой условный оператор состоит из двух частей:
1) условия;
2) выполняемого оператора. 
Выполняемый оператор выполняется в случае истинности условия. 
if x < 5 then x := x + 1;
Здесь if (если) – ключевое слово, которое показывает начало условного
оператора. После него следует условие. Затем следует ключевое слово then
(то). В конце стоит выполняемый оператор. Такой условный оператор
называют также одноальтернативным. 
Если при выполнении условия необходимо выполнить несколько
операторов, то используют “операторные скобки” (ключевые слова begin и
end). Например:
if X < 5 then
begin
X := X + 1;
Y := Y + 1;
end;
Ключевые слова begin и end называют операторными скобками.
1.8.
33
Полная форма условного оператора. Очень часто при истинности
условия требуется выполнение одного, а при ложности условия – другого
действия. В таком случае используется полная форма условного оператора. 
if X < 5 then
X := X + 1
else
X := X - 1;
При истинности уловия выполняется оператор (операторы), следующий
за словом  then. Если же условие ложно – выполняется оператор (группа
операторов), следующий за словом else (иначе). Такой оператор называют
иногда двухальтернативным условным оператором.
Цепочка условных операторов. Во многих задачах требуется про -
вер ка нескольких условий. В этом случае в алгоритме образуется  цепочка
условных операторов. 
if X < 5 then
X := X + 1
Блок-схема двухальтернативного
условного оператора
Блок-схема одноальтернативного
условного оператора
На языке Pascal перед ключевым словом else не ставится (;).
1. Язык программирования PASCAL
else if X < 10 then
X := X - 1
else if X = 13 or X = 15 then
X := X * 2
else
X := 10;
Цепочку условных операторов можно рассматривать как группу вло жен -
ных друг в друга операторов. В ее записи следующее ключевое слово  if
должно располагаться на одной строчке с  else, так как в этом случае струк -
ту ра программы выглядит более простой и понятной.
В цепочке выполняется только один оператор, обособленный командами
else if.
Оператор выбора. Если в цепочке условных операторов в качестве
условия используется одно и то же выражение и получает оно только це ло -
чис ленное значение, в таком случае можно упростить написание данной
группы операторов. Для этого служит оператор выбора. На языке  Pascal
оператор выбора начинается со строки case of. Между этими двумя сло -
вами записывается  выражение, которое проверяется. Используя оператор
выбора, можно записать приведенную выше цепочку условных операторов
таким образом:
case X of
1..4:  X := X + 1;   
5..9:  X := X - 1;   
13,15: X := X * 2;
else
X := 10;
end;
Проверочные значения  задаются отдельно в виде чисел и интервалов.
Чтобы задать интервал, надо указать минимальное и максимальное зна че -
ние и поставить между ними две точки (. .). Если один и тот же опе ра тор
нужно выполнить  для различных значений проверочного вы ра же ния, эти
значения (и интервалы) записываются через запятую. После списка зна че -
ний ставится двоеточие, а затем записывается оператор, который вы пол ня -
ет ся при совпадении проверочных значений с хотя бы одним значением из
списка. В противном случае значение выражения сравнивается со списком,
за данным на  следующей строке. 
34
Если значение выражения не совпадает ни с одним из значений из спис -
ков, выполняется оператор, следующий за ключевым словом else (раздела
else может и не быть). Оператор выбора всегда заканчивается ключевым
словом end. 
Если одно и то же значение указано сразу в нескольких списках, то вы -
полняется оператор, соответствующий первому списку с таким зна че ни ем.
Затем управление передается команде, следующей за оператором выбора.
1. Что такое ветвление и каким оператором оно реализуется в программировании?
2. Во фрагменте программы поменяй местами строки таким образом, чтобы
условный оператор был записан верно.
b := a + 2
b := a – 2;
if a > 2 then
else
3. Какое условие должно быть записано в условном операторе для того, чтобы
переменная c получила минимальное из значений a и  b?
if ... then
c := a
else
c := b;
4. Какое сообщение отобразится на экране в результате работы данного опе ра -
то ра?
if 12 < 12 then
WriteLn (‘Меньше’)
else
WriteLn (‘Не меньше’);
351. Язык программирования PASCAL
ЦИКЛЫ. 
ОПЕРАТОРЫ WHILE, FOR И REPEAT
При разработке алгоритма задач иногда приходится выполнять некоторые
команды несколько раз подряд. Конечно, можно написать такую пос ле до ва -
тельность команд нужное число раз. Но  это не совсем приемлемый путь.
Если число команд и повторений очень велико, то может получиться
длинная запись алгоритма. Помимо этого, во многих алгоритмах заранее
неизвестно число повторений,  и только во время выполнения программы
оно может стать известным. Чтобы избавиться от этой проблемы, в прог -
раммах используют специальную алгоритмическую структуру – цикл.
Во всех языках программирования есть конструкции для создания
цикла. Цикл состоит из трех основных частей:
1. Инициализация – подготовка к выполнению цикла;
2. Тело цикла – группа повторяющихся операторов;
3. Условие окончания (либо продолжения) цикла – проверяется
перед вы полнением тела цикла и используется для того,
чтобы проверить, когда закончится  цикл.
Цикл со счетчиком. Если заранее известно количество повторений
тела цикла, то с легкостью можно написать оператор цикла. Для этого  ис -
поль зуют  цикл со счетчиком.
for <переменная цикла> := <нижняя граница цикла> 
to <верхняя граница цикла> do
<тело цикла>
Счетчик, или переменная цикла, является служебной переменной и он
меняется автоматически во время выполнения цикла. Первый оператор
цикла (его и называют оператором цикла) показывает границы цикла.
Блок-схема цикла со счетчиком
1.9.
36
Цикл выполняется в следующем порядке:
1. Если границы цикла заданы в виде выражений, то вначале
вычисляются их значения.
2. Переменной цикла присваивается нижнее значение цикла.
3. Переменная цикла сравнивается с верхней границей цикла.
4. Если значение переменной цикла больше верхней границы
цикла, то прекращается его выполнение.
5. В противном случае выполняется тело цикла.
6. Текущее значение переменной цикла увеличивается на 1.
7. Выполнение цикла продолжается с шага 3.
Допустим, требуется найти сумму первых десяти натуральных чисел.
Фрагмент программы для этой задачи можно записать так:
S := 0;
for I := 1 to 10 do
S := S + I;
Первый оператор, находящийся за пределами цикла, задает начальное
значение переменной S. Очень часто до выполнения цикла требуется
провести подготовительные работы. 
В качестве счетчика здесь используется переменная  I. Границы цикла
заданы в виде констант 1 и 10. Если нижняя граница цикла больше по
значению ее верхней границы, то вместо ключевого слова to используется
ключевое слово  downto. В таком случае при выполнении цикла значение
счетчика уменьшается. 
Цикл с условием. Цикл с условием является более общей формой
составления цикла. Обычно таким  циклом пользуются в случае, когда
число повторений цикла заранее не известно. 
Особенности цикла со счетчиком
Цикл со счетчиком имеет некоторые особенности. Если границы цикла заданы
в виде выражений, то значения этих выражений вычисляются в период
инициализации цикла. Даже если значения переменных, входящих в эти
выражения, будут меняться в процессе выполнения цикла, это никак не повлияет
на число выполнений тела цикла.  
Проверка условия конца цикла происходит до первого выполнения тела цикла.
Границы цикла могут иметь такие значения, что тело цикла не будет выполнено
ни разу.
1. Язык программирования PASCAL 37
38
Различают два вида цикла с условием:
1) цикл с предусловием
2) цикл с постусловием.
Цикл с предусловием работает так:
1. Проверяется условие повторения для цикла.
2. Если условие не выполняется, то работа цикла
прекращается.
3. При выполнении условия выполняется тело цикла.
4. Выполнение цикла заново начинается с 1-го шага.
Общая форма записи цикла с предусловием такова:
while <условие> do
<тело цикла>;
Используя цикл с предусловием, фрагмент алгоритма  вычисления
суммы квадратов первых ста натуральных чисел можно записать так:
S := 0;
I := 1;
while I <= 100 do
begin
S := S + I * I;
I := I + 1;
end;
Цикл с постусловием работает так:
1. Выполняется тело цикла.
2. Проверяется условие повторения цикла.
3. Если условие не выполняется, цикл прекращает работу.
4. Если условие выполняется, работа программы продол жа -
ет ся с 1-го шага.
Блок-схема цикла с постусловием
В цикле с предусловием тело цикла может не выполниться ни разу.
39
Цикл с постусловием записывается таким образом:
repeat
<тело цикла>
until <условие>;
Тело цикла с постусловием  выполняется как минимум один раз. На
языке Pascal выполнение цикла с постусловием прекращается при
выполнении заданного условия. Программист должен составить программу
так, чтобы значения переменных, входящих в выражение для условия,
изменялись в теле цикла.  Если условие цикла останется неизменным, то
цикл может выполнятся бесконечно.
Фрагмент программы, вычисляющей сумму квадратов первых ста
натуральных чисел, написанной с использованием оператора repeat, может
выглядеть так:
S := 0;
I := 1;
repeat
S := S + I * I;
I:= I + 1;
until I > 100;
Выход из цикла. Во многих программах часто бывает необходимо
использовать  сложные циклы, в которых может быть несколько условий
для их окончания. Для упрощения создания таких циклов в современных
языках программирования предназначен оператор выхода из цикла.  Этот
оператор чаще всего используется внутри условного оператора,
находящегося в цикле. При выполнении этого оператора управление
немедленно передается первому оператору, следующему сразу после цикла.
Внутри одного цикла может быть сразу несколько операторов выхода из
цикла. Оператор выхода из цикла  записывается так:
break;  
Нижеследующий фрагмент программы вычисляет сумму чисел, вводи -
мых с клавиатуры. При вводе отрицательного числа цикл прерывается.
S := 0;
while True do
begin
Во многих языках программирования может потребоваться проверка условия
для окончания цикла.
1. Язык программирования PASCAL
Read(I);
if I < 0 then break;
S := S + I;
end;
В этом примере использован “бесконечный” цикл, так как условие цикла
всегда верно. Но вследствии того, что в цикле использован оператор выхода
из цикла, процесс не зацикливается. 
1. Из каких частей состоит цикл?
2. С помощью каких операторов описываются цикл со счетчиком, цикл с пре -
дусловием и постусловием?
3. Объясните принцип работы цикла со счетчиком.
4. Определите значение переменной к после выполнения последовательности
операторов:
var i, k: Integer;
...
k := 0; 
for i := 1 to 100 do
if i mod 2 = 0 then
k := k + 1;
5. Составьте программу, вычисляющую сумму квадратов первых ста
натуральных чисел, используя оператор for. 
6. Номера билетов автобусов – шестизначные: начиная с 000000 до 999999. Би -
лет считается “счастливым”, если сумма первой, третьей и пятой цифры
рав на сумме второй, четвертой и шестой цифры. Составьте программу,
находящую и печатающую все “счастливые” билеты.
7. Какой результат получится при выполнении этого фрагмента программы?
for Ch := ‘A’ to ‘Z’ do
Write (Ch);
40
МАССИВЫ
В программах часто используются величины одного типа. Пронуме -
рованная последовательность однотипных величин называется массивом. У
массива должно быть имя, и оно относится к каждому элементу массива.
Конкретный элемент массива можно определить по его номеру, который
называют индексом элемента.
Как и для простых переменных, во всех языках программирования
массив  заранее объявляют (описывают). В описании массива должны быть
указаны число элементов массива, возможный диапазон индексов и тип
каждого элемента.
var a: array [1..10] of Integer;
После ключевого слова  array в квадратных скобках указывается диапа -
зон индексов элементов, разделенный двумя точками (..). Затем следует
ключевое слово of и указывается тип элементов. В данном примере описы -
ваемый массив состоит из 10 целых чисел.
Массив, количество элементов которого задается в начале программы,
называется статическим. В некоторых языках программирования исполь -
зуются динамические массивы. У таких массивов количество элементов
задается в ходе выполнения программы. Как только массив объявлен, в
памяти компьютера для всех его элементов отводится место. Поэтому ди -
намические массивы используют память компьютера более рационально.
Обращение к элементу массива. Для обращения в программе к
элементу массива надо указать имя и индекс этого элемента. Например,
нижеследующий оператор присваивает 7-му элементу массива а значение
его 6-го элемента. 
a[7] := a[6];
В программах очень часто массив обрабатывается как единое целое.
Чтобы одно и то же действие применить ко всем элементам массива,  можно
использовать цикл со счетчиком. В этом случае для обращения к элементу
массива счетчик цикла выступает в роли индекса элемента. Допустим,
имеется массив b, состоящий из 10 элементов. В нижеследующим опе -
раторе  цикла всем элементам массива  присваиваются нулевые значения.
for i := 1 to 10 do
b[i] := 0;  
1.10.
1. Язык программирования PASCAL 41
Рассмотрим такую задачу. Задан целочисленный массив из n элементов.
Требуется найти элемент массива с минимальным значением. Если в
программе обозначить минимальный элемент как min, а его индекс – imin,
то фрагмент программы для решения данной задачи можно написать так:
imin := 1;
min  := a[imin];
for i := 2 to n do
if a[i] < min then begin
min  := a[i];
imin := i;
end;
WriteLn  (min, ‘ минимальный элемент, ’,
imin, ‘ индекс минимального 
элемента в массиве.’);
Двумерные массивы. Массивы с одним индексом называют
одномерными. Для многих задач такие массивы непригодны. Во многих
языках программирования есть возможность создания многоиндексных –
многомерных массивов. Например, двумерный массив можно рассматривать
как таблицу, в которой один индекс показывает номер столбца, а второй –
номер строки. 
Для объявления двумерного массива нужно для каждого индекса указать
диапазоны изменения. Эти диапазоны разделяются запятой. Например,
целочисленный массив, описывающий шахматную доску, можно объявить так:
var t: array [1..8, 1..8] of integer;
42
На языке Pascal  двумерный массив можно рассмотреть как “массив мас -
сивов”. Тогда предыдущее описание массива эквивалентно следую щему:
var t: array [1..8] of array [1..8] of integer;
При обращении к элементу двумерного массива надо указать два его
индекса, отделенные друг от друга запятыми. На языке Pascal  можно также
указать каждый из индексов отдельно.
Например, к ячейке e4 шахматной доски, являющейся соответ ству ю -
щим элементом массива, можно обратиться так:
t[5,4], 
или
t[5][4].
Вложенные циклы. При обработке двумерного массива для
вычисления значения индексов можно обойтись одним циклом с единствен -
ным  счетчиком. Но в этом случае будет трудно разобраться в программе. 
В алгоритмах работы с двумерным массивом обычно используют два
цикла. Счетчик каждого цикла принимает всевозможные значения
соответствующего индекса. В этом случае, чтобы охватить все элементы
массива, один цикл должен находиться внутри другого. Такие циклы
называют вложенными. Например, для того, чтобы присвоить всем
элементам шахматной доски нулевые значения, надо организовать
следующие циклы:
for i := 1 to 8 do
for j := 1 to 8 do
t[i,j] := 0;  
При выполнении внутреннего цикла счетчик внешнего цикла остается
неизменным. Затем он увеличивается на единицу, и заново идет выполнение
внутреннего цикла. Применение вложенных циклов в программировании
удобно не только для работы с массивами, но и для решения других задач.
Допустим, задан двумерный массив a, содержащий n строк и   m столб -
цов. Требуется определить, имеется ли в этом массиве хотя бы один
отрицательный элемент. Фрагмент программы с использованием цикла  с
постусловием для решения данной задачи можно написать так:
i := 0;
repeat
j := 0;
i := i + 1
repeat
j := j + 1;
1. Язык программирования PASCAL 43
until (j = m) or (a[i,j] < 0);
until (i = n) or (a[i,j] < 0);
if a[i,j] < 0 then
WriteLn(‘Да, есть отрицательный элемент!’)
else
WriteLn(‘Нет отрицательного элемента!’);
1. Что такое массив и как можно описать его на языке Pascal?
2. Составьте программу, находящую максимальный элемент массива а среди элементов
с индексами от k до   m.  Найденное значение присвойте переменной j.
3. Дан целочисленный массив, состоящий из 10 элементов. Два элемента этого
массива имеют одинаковые значения. Составьте программу, определяющую
индексы этих элементов. Значения этих индексов присвойте переменным i и   j.
4. Что будет значением переменной  L после выполнения  данного фрагмента
программы? Выберите правильный ответ.
var a: array [1..4, 1..4] of integer;
L, f, g, v: integer;
...
L := 0; 
for g := 1 to 4 do
begin
v := 0;
for f := 1 to 4 do
if a[f,g] < 0 then v:= v + 1;
L := L + v;
end;
a) число положительных элементов массива a;
б) число не положительных элементов массива a;
в) число отрицательных элементов массива a;
г) число отрицательных элементов в первой строке массива a;
д) максимальное значение отрицательных элементов массива a.
44
РАБОТА СО СТРОКАМИ
Во всех языках программирования предусмотрена работа с пос ле до ва -
тель ностью символов, другими словами, работа со строками.
Строка может быть задана или константой, или  значением перемен ной.
На языке Pascal строковая константа задается последовательностью
символов, взятых в кавычки:
‘Pascal’
‘1234’ 
‘река Араз’
‘’ – тоже специальная строковая константа, имеющая нулевую длину.
Такую строку называют пустой строкой. 
На языке Pascal строковые переменные имеют тип string. Например, в
программе  запись
var a: string;
указывает на то, что a – строковая переменная. 
Максимальная длина строки зависит от конкретного языка програм -
мирования или же от транслятора заданного языка.  В языке Pascal перемен -
ная типа  string может содержать не более 255 символов. В современных
языках программирования строки могут быть практически любой длины. 
Операции со строками отличаются от операций  с числами. Операции
сложения, вычитания, умножения и деления не имеют смысла в работе со
строками. Основная операция над строками – это их сцепление, или конка-
тенация. В результате этой операции вторая строка дописывается в конец
первой. Операция конкатенации обозначается символом + (плюс).
var a, man: string; 
...
man := ‘десять’;
a := man + ‘ манат’;   
Несмотря на одинаковую запись (+), операция сложения отличается от
операции конкатенации. 
Для объединения строк используют также функцию Concat.  Например, 
a := Concat(man, ‘ манат’);
Количество операций над строками превосходит количество операций
над числами. Но использование любого из знаков  этих операций  не очень
удобно и не просто. Поэтому остальные операции над строками осущест -
1.11.
1. Язык программирования PASCAL 45
вляются  с помощью стандартных  процедур и функций. Во многих языках
программирования возможны следующие действия над строками:
• определение длины строки;
• выделение  подстроки;
• удаление или добавление символов;
• поиск символа в строке;
• изменение регистра символов (букв) строки. 
Ознакомимся с функциями, предусмотренными в языке Turbo Pascal для
выполнения этих и других действий. 
Length (St). Эта функция вычисляет длину строки St.  Под “длиной” стро -
ки подразумевается число символов в ней. Длина пустой строки равна 0.
Вычисление длины строки S и присвоение этого значения пе ре менной
LenS, можно представить так:
LenS := Length(S); 
Внизу приводится фрагмент программы с использованием функции
Length. 
S := ‘Hello’;
L := Length(S);
WriteLn(L);   { Будет выведено число 5 } 
S := ‘Hello Students’;
WriteLn(Length(S)); { Будет выведено число 14 }
S := ‘  ’;        { Пустая строка }
WriteLn(Length(S)); { Будет выведено число 0 }
 Copy (St,Index,Count). Иногда требуется выделить и вырезать часть ст -
ро ки. Например, если три компонента (день, месяц, год) в строке ’17 мая
2009’, присвоенные переменной Date, требуется обработать отдельно
друг от друга, то используется функция Copy.
Допустим в программе строка даты записана в формате DD MMM
GGGG.   Здесь DD – день месяца (1-й и 2-й символ), MMM – краткая
запись названия месяца (4 – 6 символы), GGGG – год (8 – 11 символы). 
46
Если Date, Month, Day и  Year – строковые переменные, то функция
Copy присвоит пере мен ной Day первые два символа переменной  Date
(‘17’). 
Day := Copy (Date, 1, 2);
Таким же образом, подстрока ‘май’ присваивается переменной Month,
а подстрока ‘2009’ – переменной Year. 
Month := Copy (Date, 4, 3);
Year  := Copy (Date, 8, 4);
 Insert (Subst,St,Index). Эта процедура вставляет строку Subst в строку
St, начиная с позиции Index. Например, после выполнения функции 
Insert (‘п’, ‘Алай’, 3) 
строка 
‘Алай’
превратится   в строку 
‘Алпай’.
 Delete (St,Index,Count). Эта процедура, начиная с позиции Index, сти -
ра ет в строке St Count символов. Например, вследствии применения
функ ции  Delete (‘Алгоритм’,1,4) строка ‘Алгоритм’ превратится в
строку ‘ритм’.
 Pos (Subst,St). Эта функция, разыскивающая вхождение под стро ки  Subst
в строку St.  В качестве результата своей работы она выдает либо 0 – если
вхождения обнаружено не было, либо целое положитель ное число,
являющееся номером позиции, с которой выявлено вхож дение. При этом
оценивается только первое вхождение. Если вхождений несколько, то
обнаружено будет только первое из них и только его позиция будет
выдана в качестве результата функции.
S := ‘средняя школа номер 1’;
S1 := ‘школа’;
J := Pos(S1, S);
WriteLn(J); { будет выведено число 9 }
S1 := ‘лицей’;
J := Pos(S1, S);
WriteLn(J); { будет выведено число 0 }
 Val (St,X,Code). Если переменная или константа типа String содержит
сим вольное представление вещественного или целого числа, например,
‘17.5’ или  ‘1234’, то с помощью процедуры Val можно преобразовать 
1. Язык программирования PASCAL 47
48
это число в значение переменной типа Real. Здесь  St – это сама исходная
строка, X – это переменная, которой будет передано получившееся
вещественное число. Целочисленный параметр Code содержит 0, если
преобразование прошло успешно, в противном случае – номер места в
строке, в котором произошла ошибка. В данном фрагменте программы
переменной NumStr присваивается целое значение.
repeat
Write (‘Введите целое число: ’);
ReadLn (NumStr);
Val (NumStr, IntNum, Error);
until Error = 0;
Если введенное число является строкой, то процедура Val присваивает
целой переменной IntNum эту строку. Если в веденной строке помимо
цифр есть и другие символы, значение переменной Error будет отлично
от 0,  и произойдет повторение цикла.
 Str (X,St). Эта процедура, обратная предыдущей, преобразует число из
переменной Х в строку, которая присваивается переменной St. Напри -
мер, процедура Str (123 :5, NumSt) присвоит переменной NumSt
строку    ‘  123’. Здесь 5 – число символов в строке.
В качестве примера применения некоторых процедур рассмотрим
программу, которая подсчитывает, сколько раз встречается указанное
пользо вателем слово в строке.
program P;
var
s, s1: string;
k, i: Integer;
begin
Write (‘Ведите исходную строку: ’);
ReadLn (s);
Write (‘Введите слово, которое следует
искать: ’);
ReadLn (s1);
k := 0;
49
while Pos(s1, s) > 0 do
begin
k := k + 1;
Delete(s, Pos(s1, s), Length(s1));
end;
WriteLn (k);
end.
1. Что такое строка  и какие операции производятся над строками?
2. Допустим, что , Temp1 := ‘Абра’ və Temp2 := ‘кадабра’.
Определите результаты выполнения приведенных ниже функций и процедур.
a) Magic := Concat(Temp1, Temp2)
б) Length(Magic)
в) HisMagic := Copy(Magic, 1, 8)
г) Delete(HisMagic, 4, 3)
д) Insert(Temp1, HisMagic, 3)
е) Pos(Temp2, Magic)
ж) Pos(Temp1, Magic)
з) Val(‘1.234’, RealNum, Error)
и) Str(1.234 :3:1, RealStr)
3. Палиндром строки состоит из самой строки и строки, записанной в об рат -
ном порядке. Запишите программу, создающую палиндром строки.
Например,  на входе задается строка ‘abc’, а на выходе должна получиться
строка ‘abccba’.
4. Составьте программу, вычисляющую число гласных букв в строке.
1. Язык программирования PASCAL
ПОДПРОГРАММЫ. 
ФУНКЦИИ И ПРОЦЕДУРЫ
В программе, содержащей пару сотен строк, еще можно как-то разоб ра -
ть ся. Но с увеличением количества строк теряется общая логика работы.
Даже зная,  какие элементарные действия производят конкретные опера то -
ры, понять общее назначение программы бывает довольно сложно. Стано -
вит ся неясной структура программы и последовательность ее выпол нения.
В результате отладка программы  приобретает хаотичный характер: ста но -
вит ся сложно отслеживать исправления и вносить их в программу.
Для решения этой проблемы алгоритм разбивается на отдельные
алгоритмы, выполняющие  простые действия. Такие алгоритмы называют
вспомогательными алгоритмами.  В программировании вместо термина
“вспомогательный алгоритм” употребляется термин “подпрограмма”. Для
обращения к вспомогательному алгоритму (подпрограмме) ее надо вызвать.
Обычно при разработке программ среднего объема  возникает необ хо ди -
мость разделения их на несколько подпрограмм, каждая из которых вы пол -
няет несложные вычисления. Итоговый алгоритм состоит не из отдельных
операторов, а из блоков, имеющих собственные имена. В этом случае под -
прог раммы можно рассматривать как новые операторы, разработанные
прог раммистом.
Стандартные подпрограммы. Многие вспомогательные алгоритмы
очень часто используют в различных задачах. Например, очень часто
требуется вычислить значения математических функций или же произвести
стандартные операции над строками. Если  бы каждый программист сам
сос тавлял такие алгоритмы, то он терял бы много времени. Эту проблему
решают, используя стандартные подпрограммы. 
Обычно стандартные подпрограммы определены не в языке програм -
мирования, а в среде (системе) программирования. Они включены в биб -
лиотеку стандартных подпрограмм,  дополнительно к транслятору. Большие
библиотеки стандартных подпрограмм значительно облегчают работу
программиста. 
Типы вспомогательных алгоритмов. Подпрограммы обычно
делят на две категории: процедуры и функции. 
Процедура обычно выполняет какое-то самостоятельное отдельное действие. 
Функция же вычисляет  конкретное  значение и пересылает (возвращает) это
значение вызывающей ее программе (или подпрограмме).
1.12.
50
В некоторых языках программирования (например, на языке С) нет
разделения подпрограмм на функции и процедуры. Их всех рассматривают
как функции. В программах, написанных на этих языках, процедура – это не
возвращающая значение функция. 
Параметры подпрограммы. Для того, чтобы работа подпрограммы
имела какой-то смысл, надо, чтобы она получала данные из вызывающей ее
программы. Данные передаются подпрограмме в виде параметров. Каждая
подпрограмма ждет получения совокупности данных конкретного типа.
Существуют подпрограммы, в которых нет необходимости  в параметрах.
При создании подпрограммы заранее неизвестны значения, которые
передаются ее параметрам. При описании подпрограммы в ее заголовке
указываются формальные параметры. Формальные параметры – это про из -
воль ные идентификаторы, определяющие тип переданных данных. Они
нуж ны  только в представлении операций в подпрограмме.
Для вызова подпрограммы указываются уже фактические параметры.
Во время выполнения подпрограммы формальные параметры заменяются
соответственно фактическими параметрами.
Вызов подпрограммы. Вид оператора, вызывающего подпрограмму,
зависит от типа подпрограммы и от синтаксиса конкретного языка програм -
мирования. Чтобы вызвать подпрограмму, нужно указать ее имя, затем в
скобках показать список фактических параметров. Тип и количество факти -
ческих параметров должны совпадать с типом и количеством формальных
параметров в подпрограмме. Фактическими параметрами могут быть не
только переменные, но и константы, выражения.
Функцию можно вызвать из любого места программы. В ни же сле дую -
щем примере значение длины гипотенузы прямоугольного треугольника  с
катетами x и y присваивается переменной z.
z := sqrt(x*x + y*y);
Вызов процедуры оформляется обычно как отдельный оператор. Для
этого на языке Pascal  не требуется особого ключевого слова. Например,
процедуру Р, принимающую в качестве параметра два целых числа, можно
вызвать так:
P(1, 2); 
Параметры Формальные параметры Фактические параметры
1. Язык программирования PASCAL 51
Программирование вспомогательных алгоритмов. Описание
вспомогательных алгоритмов вводится в исходный текст программы. Во
многих языках программирования до вызова подпрограммы требуется ее
описание.
Описание подпрограммы включает заголовок, тело и конец.  В заголовке
подпрограммы задается  имя подпрограммы и дается описание формальных
параметров. Для функции задается также тип возвращенного значения:
function Square(x: Integer) : Integer;
begin
Square := x*x;
end;
На языке Pascal нет специального оператора конца. Тело функции
размещено между операторами begin и  end. 
Эту переменную можно использовать в теле функции в операторе
присваивания только слева. 
Нижеследующая функция вычисляет факториал числа (факториалом
натурального числа n является произведение натуральных чисел от 1 до n
включительно, записывается n!=1·2·3 … ·n ).
function Fact(n : Integer) : Integer;
var
i : Integer;
res : Integer;
begin
res := 1;
for i := 1 to n do res := res * i;
Fact := res;
end;
В описании процедуры нет необходимости вычислять возвращенное
значение. Ниже описана процедура, выдающая на печать сумму двух целых
чисел.
procedure PrintSum(x, y: Integer);
begin
WriteLn(x+y);
end;
Значение, возвращенное функцией, должно быть присвоено переменной с тем же
названием, что и сама функция.
52
Как правило, описание процедуры должно быть дано до первого
обращения к ней (так удобнее транслятору). Но по некоторым причинам это
может быть неудобно прораммисту. В некоторых языках программирования
есть возможность размещать описание процедуры после ее первого вызова, но
в таком случае требуется дать ее простое описание до ее использования.
Для этого на языке Pascal повторяется заголовок процедуры. Отсутствие
ключевого слова begin показывает, что это не описание, а всего лишь
объявление процедуры.
procedure PrintSum(x, y: integer);
Заранее объявленная процедура дает транслятору информацию о
параметрах процедуры. Это, в свою очередь, дает возможность правильно
обработать вызов процедуры.
Стандартные математические функции языка Turbo Pascal
Нижеследующая программа Возрастание меняет между собой значе -
ния  переменных a, b, c таким образом, чтобы они расположились в воз ра -
ста ющем порядке (a ≤ b ≤ c). 
Функция Назначение Аргумент Вывод
Abs(X) Абсолютное значение X Real или Integer Real, или
Integer
Cos(X) Косинус угла X Real или Integer
(в радианах)
Real
Exp(X) ex, e = 2.71828... Real или Integer Real
Ln(X) Натуральный логарифм X,
X > 0
Real или Integer Real
Round(X) Самое близкое целое число
к числу X 
Real Integer
Sin(X) Синус угла X Real или Integer
(в радианах)
Real
Sqr(X) Квадрат X Real или Integer Real или
Integer
Sqrt(X) Квадратный корень из X
X > 0.0
Real или Integer Real
Trunc(X) Целая часть числа X Real Integer
1. Язык программирования PASCAL 53
program Vozrastanie;
var
a, b, c : Integer;
procedure Swap(var x, y : Integer);
var
t : Integer;
begin
t := x; x := y; y := t;
end;
begin;
WriteLn(‘Введите три числа ’);
ReadLn(a, b, c);
if a > b then Swap(a, b);
if b > c then Swap(b, c);
if a > b then Swap(a, b);
WriteLn(a:5, b:5, c:5);
ReadLn;
end.
Обратите внимание на процедуру Swap. Эта процедура меняет местами
значения переменных. Такой перестановкой очень часто пользуются в
программировании. 
Остановка выполнения подпрограммы и возврат в вызывающую
программу происходят в случае перехода управления к его последнему
оператору. Это не всегда удобно. Для того, чтобы преждевременно закон -
чить выполнение подпрограммы и вернуться в вызывающую прог рамму,
используют оператор exit.  
1. Каково преимущество использования подпрограмм?
2. Какие существуют виды подпрограмм?
3. Чем отличается функция от процедуры?
4. С клавиатуры введено натуральное число n. Напишите функцию, опре де ля -
ю щую, делится или не делится нацело это число на 3.
54
РАБОТА С ФАЙЛАМИ
Все программы, с которыми мы имели дело до сих пор, представляли
собой интерактивные программы. Интерактивная программа считывает
все входные данные с клавиатуры, а весь вывод осуществляется на экран.
Интерактивные ввод и вывод хороши  для программ, манипулирующих
небольшими количествами данных, однако, подобный подход малоэф фект -
ивен для программ, предназначенных для обработки обширных объемов
информации. В последнем случае, чтобы выйти из положения, можно для
ввода и вывода использовать файлы. Pascal работает с двумя видами инфор -
мационных файлов: текстовыми и двоичными файлами.
Текстовой файл представляет собой набор отдельных символов, которые
хранятся на диске под одним именем. Все данные, обрабатываемые прог рам -
мой, прежде чем запускать эту  программу, можно сохранить в текстовом
файле. После этого следует преобразовать программу таким образом, чтобы
она считывала нужные ей данные не с клавиатуры, а из текстового файла.
Входные и выходные файлы. Входной файл – это файл, содер -
жащий входные данные программы. Входной файл может представлять
собой текстовой файл или двоичный файл. Одно из преимуществ
использования  входного файла заключается в том, что с применением
текстового редактора в нем можно исправить все ошибки, прежде чем эти
данные будут обработаны программой. Второе преимущество состоит в
том, что файл с входной информацией может считываться программой
много раз. Эта возможность облегчает отладку, поскольку программа при
каждом запуске может считывать свои данные каждый раз из того же файла.
А в интерактивной программе приходится каждый раз заново вводить с
клавиатуры данные.
В то же время можно преобразовать программу таким образом, чтобы
вычисленные результаты она выводила не на экран, а в текстовой файл. Это
позволит иметь на диске электронную версию результатов работы програм -
мы.  Этот файл затем может быть выведен на печать, либо даже использован
в качестве входного файла другой программой. Файл, содержащий
результаты работы программы, называется выходным файлом. 
Входной файл – это файл, содержащий входные данные программы.
Текстовой файл представляет собой набор отдельных символов, которые
хранятся на диске под одним именем.
1.13.
1. Язык программирования PASCAL 55
Для того, чтобы работать с текстовыми файлами, надо выполнить пять
операций.
1. Описание файла. Как и все другие объекты программы, текстовой файл
перед использованием следует описать в разделе var с использованием
ключевого слова text.  Например, 
var f1, f2: text;
указывает на то, что f1 и  f2 являются текстовыми файлами. Их также
называют текстовыми переменными.
2. Сопоставление файловой переменной файлу на диске. Для того,
чтобы иметь доступ к файлу, сохраненному на диске, необходимо указать
имя этого файла, а также указать в какой папке (каталоге) он содержится.
То есть надо сообщить полное имя файла. Для этого на Pascal исполь зу -
ется процедура Assign. Например, следующий оператор вызова про це -
дуры связывает файловую переменную f1 с файлом in.txt, содер жа щимся
на диске С в папке ALTAY.
Assign(f1, ‘c:\ALTAY\in.txt’);
Если указано только имя файла, то Turbo Pascal принимает во внимание,
что файл находится в одном каталоге с программой. Например, процедура
Assign(f2, ‘out.txt’);
связывает файл out.txt, находящийся в папке программы  с файловой
переменной f2. Процедура Assign является единственной, которая опе -
рирует фактическим именем файла на диске. Все другие процедуры и
функции используют файловую переменную. По этой причине програм -
мисты называют f1 внутренним именем файла, а c:\ALTAY\in.txt – его
внешним именем.
3. Открытие файла для чтения или для записи. Прежде чем программа
сможет манипулировать текстовым файлом, этот файл должен быть
подготовлен к вводу или выводу – иными словами, открыт. Текстовой
файл не может быть открыт для ввода и для вывода одновременно. То
есть, если идет процесс считывания данных из текстового файла, вы не
сможете осуществить запись результатов в тот же файл. Открытие текс -
тового файла на Pascal  производится операторами  Reset и  Rewrite.
Reset(f1);
Выходной файл – это файл, содержащий результаты  работы программы.
56
Данный оператор подготавливает файл, ассоциированный с файловой пе -
ременной f1, к вводу в программу, перемещая при этом указатель текущей
позиции к началу файла. Указатель текущей позиции указывает на
символ в файле, который будет обработан следующим. Вызов процедуры
Reset должен иметь место до того как из файла будет что-либо считано.
Rewrite(f2);
Эта процедура подготавливает файл, связанный с  файловой переменной
f2, для приема данных, являющихся результатом работы программы. Если
на диске не будет файла с таким именем, то он будет создан. Если
файловая переменная ссылается на существующий файл, то все его
содержимое будет удалено при открытии для записи, и указатель текущей
позиции  будет переведен на начало файла.
4. Запись данных в файл или чтение данных из файла. Для того, чтобы
прочитать данные из текстового файла, используют процедуру ReadLn.
Эта процедура обрабатывает  каждую строку текстового файла также, как
и данные, введенные с клавиатуры. Процедура 
ReadLn(f1, n);
читает данные с входного файла f1 и записывает переменной n. Для того,
чтобы считать с файла два последовательно идущих элемента и
присвоить их переменным a и  b, можно использовать процедуру 
Read(f1, a, b);
Как вы уже знаете, для вывода данных на экран используются процедуры
WriteLn и Write. Они применяются также и для записи данных в тек сто -
вой файл. Процедура  
WriteLn(f2, n);
записывает значение переменной  n в файл f2. То есть данные будут
записаны в файл с новой строки. Процедура
Write(f2, a, b);
записывает в файл  f2 числа a и b и новая запись будет производиться  в
той же строке. 
5. Закрытие файла. После окончания работы с входным или выходным
файлом необходимо его закрыть, то есть прекратить связь файла на диске
с программой. Другими словами, открытые файлы должны быть
закрыты. Для этого в Pascal  имеется процедура Close. 
Close(f1);
Close(f2);
1. Язык программирования PASCAL 57
58
Запись  Close (f1, f2) считается неверной – каждый файл надо закрыть
в отдельности.
Рассмотрим два примера работы с файлами. В первом – два числа
записываются в файл, во втором – они же читаются из файла и выводятся
на экран.
Пример 1.
program P1;
var
f: text;    {Объявление файла}
n: Integer;
begin
Assign(f,‘file1.txt’);
{Файл f связывается с файлом
file1.txt, расположенном на диске}
Rewrite(f);  {Открывается файл f для записи }
n := 7;
WriteLn(f, n); {Значение переменной n
записывается в файл}
WriteLn(f, 5); {Число 5 записывается в файл}
Close(f);  {Закрытие файла}
end.
Пример 2.
program P2;
var
f: text;   {Объявление файла}
n: Integer;
begin
Assign(f,’file1.txt’); {Файл f связывается с
файлом  file1.txt, расположенном на диске}
Reset(f);    {Открывается файл f для чтения}
59
ReadLn(f, n); {Первое число заносится в переменную n}
WriteLn(n);  {Значение переменной n (число 7)
выводится на экран}
ReadLn(f, n);{Второе число заносится в переменную n}
WriteLn(n);  {Значение переменной n (число 5)
выводится на экран}
Close(f);    {Закрытие файла}
end.
А теперь ознакомимся с часто используемыми при работе с файлами
функциями.
Добавление информации в текстовые файлы. Для текстовых
фай лов предусмотрена возможность добавления информации в их конец.
Для этого файл следует открывать не процедурой Rewrite, а процедурой
Append. 
Append(<Файловая переменная>);
После вызова данной процедуры файл открывается для записи, но
информация в нем не стирается, как в случае использования процедуры
Rewrite. Указатель текущего элемента перемещается в конец файла,
соответственно выводимая информация дописывается к открытому файлу.
В качестве примера допишем к файлу file1.txt, созданному программой
P1, новую запись:
program P3;
var
f: text;
begin
Assign(f,’file1.txt’);
Append(f);
WriteLn(f, 9);
Close(f); 
end.
1. Язык программирования PASCAL
60
В нижеследующей таблице дана краткая информация еще о некоторых
фунциях, используемых при работе с файлами.
1. Каково преимущество ввода данных  из файла?
2. Какие виды файлов имеются в Turbo Pascal?
3. Каким образом можно использовать текстовые файлы в Turbo Pascal и какие
операторы  для этого нужны?
4. Что такое файловая переменная?
5. Объясните сущность внешнего и внутреннего имени файла.
Функция Назначение
Eof
(<Файловая переменная>)
Проверяет конец файла End-of-file (конец
файла) – возвращает истинное значение, если
достигнут конец файла, или ложное, если конец
файла не достигнут.
Erase
(<Файловая переменная>)
Удаляет файл, соответствующий указанной
файловой переменной.
Rename
(<Файловая переменная>,
<Новое имя файла>)
Переименовывает файл.
MkDir
(<Имя каталога>)
Создает новый каталог.
RmDir
(<Имя каталога>)
Удаляет каталог. При этом удаление возможно
для каталогов, которые не содержат файлы и
подкаталоги.
61
ПРАКТИКУМ
ОПЕРАТОРЫ
1. Какое значение получит переменная s после выполнения последо -
вательности команд?
a) s := 7; s := 23;
б) s := 1; s := s + 3;
в) a := 2; b := 5; b := b – a; s := b + a;
г) s := 0; k := 30; d := k – 5; k := 2*d;
s := k – 100;
2. Какие значения получат переменные x и y после выполнения
следующих операторов? Поменяют ли эти переменные свои значения?
x := 2;
y := 9;
x := y;
y := x;
3. Какие значения получат переменные a, b, c после выполнения
следующих операторов (a = 1, b = 2, c = 3) ? 
a := b;
b := c;
c := a;
1.14.
1. Язык программирования PASCAL
4. Что будет выведено на экран после выполнения следующих операторов?
a := 4;
Write(a);
Write(‘a’);
5. Что будет выведено на экран после выполнения данной программы?
proqram Task5;
var
a, b, c : Integer;
begin
Write(1);
Write(2, 3);
WriteLn(4);
Write(5);
WriteLn(6, 7);
WriteLn;
Write(8);
ReadLn;
end.
6. Что будет выведено на экране после выполнения данной программы,
если с клавиатуры ввести числа 1, 2, 3?
proqram Task6;
var
a, b, c : Integer;
begin
WriteLn(‘Введите три целых числа’);
ReadLn(a, b, a);
c = a + b;
Write(‘a+b=’, c);
ReadLn;
end.
62
7. Какие числа и в каком порядке надо ввести с клавиатуры, чтобы на
экране оказалось выведенным число 123?
Read (a, b, c);
Write(c, b, a);
8. Найдите и устраните ошибки в программе. 
proqram Task8;
var
a; b; c : Integer;
begin
WriteLn(‘ Введите число ’, a);
ReadLn(a)
b = 5;
c = ab;
WriteLn(a ‘ * ’ b ‘ = ’, s);
ReadLn(a);
end.
9. Составьте  программу, требующую ввести целое число и выводящую
на экран само число, его квадрат и куб. Результаты программы должны быть
приблизительно такими:
Введите число. 
4
4**2 = 16
4**3 = 64
Нижеследующая программа требует от пользователя количество
дней в текущем месяце и текущее число и выводит на экран число дней,
оставшихся до конца текущего месяца. В программе переменная kd
показывает количество дней в текущем месяце, переменная td – текущее
10.
1. Язык программирования PASCAL 63
Примечание:    – задание с решением. Обратите внимание на решение и
проанализируйте его.
10.
64
число,  а переменная od – число оставшихся дней до конца месяца.
Проверьте, как работает программа. 
proqram Task10;
var
kd, td, od : Integer;
begin
WriteLn(‘Сколько дней в текущем месяце?’);
ReadLn(kd);
WriteLn(‘Какое сегодня число?’);
ReadLn(td);
od := kd – td;
WriteLn(‘До конца этого месяца осталось ’, od,
‘дней’);
ReadLn;
end.
11. Напишите программу, запрашивающую  год вашего рождения, теку -
щий год и выдающую на экран ваш возраст. Результат работы программы
должен быть приблизительно такой:
Год твоего рождения? 
1995
Какой сейчас год?
2009
Тебе 14 лет. 
12.  При каких значенях x будут верны следующие равенства?
a) x div 5 = 8
б) 50 div x = 7
в) 50 mod x = 7
г) x div 5 = x mod 5
д) 20 div x = 20 mod x
13.  Допустим, в переменной S хранится пятизначное число, переменная
a показывает число десятков тысяч в этом числе, переменная b – число
65
тысяч, переменная c – число сотен, переменная d – число десятков, а
переменная e – число единиц. Укажите в следующей таблице соответствие
между столбцами таблицы.
14. Составьте программу, находящую цифры произвольного четырех -
знач ного числа. Внизу дан примерный диалог между пользователем и
компьютером. Число, введенное пользователем, выделено жирным шриф -
том.
Введите четырехзначное число. 
4523
Число тысяч 4
Число сотен 5
Число десятков 2
Число единиц 3
Действие Переменная
s div 100 mod 10 a
s mod 10 b
s div 10 mod 10 c
s div 10000 d
s mod 100 div 10 e
1. Язык программирования PASCAL
УСЛОВИЕ
15.  Какое значение примет переменная p после выполнения следующих
операторов?
q := -1;
p := 1;
if (p > 0) and (q > 0) then
p := 2 
else 
if (p < 0) and (q < 0) then
p := 3
else
p := 4;
16.  Какие значения примут переменные p и q после выполнения сле ду -
ющих операторов?
q := false;
p := true;
p := p and q;
q := q or false;
q := (not q) or p;
17. Какое значение примет переменная c после выполнения следующих
операторов?
a := 8;
a := a + 2;
b := a - 1;
c := a + b div 2;
66
18. Найдите и устраните ошибки в данном фрагменте программы.
if a >= 10 and a <= 99 then
WriteLn(a ‘ двузначное число’);
WriteLn(‘его квадрат =’, sqrt(a));
else (a, ‘ число не двузначное’);
19. Какие значения примут переменные v, t, u после выполнения
программы, если с клавиатуры ввести числа 3, 5, 9?
proqram Task19;
var
a, b, c, v, t, u : Integer;
begin
WriteLn(‘Введите три числа’);
ReadLn(a, b, c);
v := 1; t := 0; u := 0;
if a mod 3 = 0 then begin
v := v * a;
t := t + 1;
u := u + 1;
end;
if b mod 3 = 0 then begin
v := v * b;
t := t + 1;
u := u + b;
end;
if c mod 3 = 0 then begin
v := v * c;
t := t + 1;
u := u + c;
1. Язык программирования PASCAL 67
68
end;
WriteLn(‘v=’, v, ‘ t =’, t, ‘ u=’, u);
ReadLn;
end.
20. Используя логические операции and, or, not, напишите следующие
условия на языке программирования:
a) x принадлежит отрезку [-3, 2] ;
б) число a находится в заштрихованной области.
21. Дано уравнение ax + b = 0. Составьте программу, находящую корень
данного уравнения или выдающую сообщение об отсутствии корней.
22. Напишите программу, относящую пользователя, в зависимости от
его возраста, к разной возрастной категории:
• До 13 лет – детский возраст
• От 14 до 24 – молодой возраст
• От 25 до 59 – зрелый возраст
• Свыше 60 – старческий возраст
Дано квадратное уравнение ax2 + bx + c = 0 . Данная программа
находит решение этого уравнения при заданных значениях a, b, c, или же
дает сообщение о том, что данное уравнение не имеет решения. Проверьте
выполнение программы.
program KvadratUravn;
var a, b, c  : Real;
D : Real;
x1, x2 : Real;
begin
Write (‘Введите коэффициенты a, b, c: ’);
23.
69
ReadLn(a, b, c);
if (a = 0) and (b = 0) and (c = 0)
then begin
Write (‘Все коэффициенты равны 0’);
WriteLn (‘Х – произвольное число’)
end
else
if (a = 0) and (b <> 0)
then WriteLn(‘Уравнение имеет один корень
х=’, (-c/b):6:2)
else
begin
D := b*b – 4*a*c;
if D > 0
then begin
x1:=(-b+sqrt(D))/(2*a);
x2:=(-b-sqrt(D))/(2*a);
WriteLn(‘x1=’, x1:6:2,‘x2=’,     
x2:6:2)
end
else
if D = 0
then begin
x1: = -b/(2*a);
WriteLn(‘Корни одинаковые’);
WriteLn(‘x1,2=’,x1:6:2);
end
else WriteLn(‘Нет действительных
корней’);
end;
end.
1. Язык программирования PASCAL
ЦИКЛЫ
24. Выведите на экран квадраты натуральных чисел от 1 до 20.
25. Напишите программу, выводящую на экран таблицу умножения на 4.
26. Выведите на экран натуральные числа, нацело делящиеся на 4 в
интервале от 1 до 100.
27. Даны натуральные числа n и m. Напишите программу, вычис -
ляющую произведение этих чисел, не используя операцию умножения.
Дано натуральное число n. Проверьте программу, результатом
которой будет представление данного числа в следующем виде:
6
6 6
6 6 6
6 6 6 6
6 6 6 6 6
6 6 6 6 6 6
(показано для n=6).
program Task28;
var i, j, n  : Integer;
begin
ReadLn(n);
for i := 1 to n do begin
for j := 1 to i do Write(n, ‘ ’);
WriteLn; 
end;
end.
28.
70
29. Напишите программу, выводящую целое число в таком виде:
6 6 6 6 6 6
6 6 6 6 6
6 6 6 6
6 6 6
6 6
6
30. Напишите программу, выводящую целое число в таком виде:
0
1 0
2 1 0
3 2 1 0
4 3 2 1 0
5 4 3 2 1 0
МАССИВЫ
31. Какие значения получат переменные  p и q при выполнении данной
последовательности операторов?
for i := 1 to 10 do
for j := 1  to 5 do
A[i,j] := i*j;
p := 0;
q := 0;
m := 2;
n := 5;
for k := 1 to 5 do begin
p: = p + A[m,k];
q := q + A[n,k];
end;
711. Язык программирования PASCAL
72
Данная программа выводит на экран первые 5 элементов массива
Х, состоящего из 10 элементов. Проверьте работу программы.
program Print;
var i : Integer;
X : array[1..10] of Integer;
begin
for i := 1 to 5 do
Write(X[i], ‘ ’);
WriteLn; 
end.
Данная программа вычисляет и выдает на экран  число
положительных и отрицательных элементов одномерного массива.
Проверьте работу программы.
program Task33;
const Nmax = 100;
type TArr = array[1..Nmax] of integer;
var A : Tarr;
procedure Solve;
var i, n, p : Integer;
begin
p := 0;
ReadLn(n);
for i := 1 to n do Read(A[i]); 
for i := 1 to n do 
if A[i] >= 0 then Inc(p); 
WriteLn(‘Число положительных элементов ’,
p);
WriteLn(‘Число отрицательных элементов ’,
n - p);
end;
33.
32.
73
begin
Solve;
end.
34. Напишите программу, определяющую номер последнего отрица -
тельного элемента одномерного массива.
35. Дан целочисленный массив. Найдите сумму элементов массива,
заключенных между числами q и  t, введенных с клавиатуры.
36. Заполните массив А размером n x m следующим образом:
1 2 3 4 5 6 7
8 9 10 11 12 13 14
15 16 17 18 19 20 21
22 23 24 25 26 27 28
РАБОТА  СО  СТРОКАМИ
Данная программа выводит на экран порядковый номер символов
ASCII  и сами символы.  В программе использована переменная k как счет -
чик в задании на одной строке 15 символов. Проверьте работу программы.
program Task37;
var i, k : Integer;
begin
WriteLn(‘Вывод на экран порядковых номеров
символов – значение переменной
i и самих символов’);
k := 0;
for i := 1 to 255 do begin
Write(i : 4, ‘ Символ ’, Chr(i));
k :=k + 1;
if k = 15 then begin
WriteLn;
37.
1. Язык программирования PASCAL
k := 0;
end;
end;
end.
В соответствии с правилами  набора текста, после запятой в тексте
всегда ставится пробел. Эта программа находит в тексте такого типа
ошибки и исправляет их. Проверьте работу программы.
program Task38;
var i : Integer;
s : string;
begin
WriteLn(‘Введите текст’);
ReadLn(s);
i := 1;
while i < Length(s) do begin
if (s[i] = ‘,’) and not(s[i+1] = ‘ ’) 
then Insert(‘ ’, s, i+1);
i :=i + 1;
end;
WriteLn(s);
ReadLn;
end.
39. Измените данную выше программу таким образом, чтобы она
проверяла наличие пробела  после таких знаков как “!” , “?”, “.”, и  если есть
ошибка, то исправляла ее.
40. Напишите программу, находящую самое короткое и самое длинное
слово  в строке.
41. Напишите программу, вычисляющую, сколько раз встречается та или
иная буква в строке (например буква  “a”).
38.
74
ФАЙЛЫ
42. Задан текстовой файл  test.txt на диске:
123 17 25
256 80 5
89 56 234
123 123 123
81 11 11 11
Что будет выведено на экран после выполнения программы?
program Task42;
var f : text;
s : string;
n, m : Integer;
c, z : Char;
begin
Assign(f, ‘test.txt’);
Reset(f);
ReadLn(f, s);
ReadLn(f, n);
Read(f, m);
ReadLn(f, c);
Read(f, z);
Close(f);
WriteLn(‘s=’, s);
WriteLn(‘n=’, n);
WriteLn(‘m=’, m);
WriteLn(‘c=’, c);
WriteLn(‘z=’, z);
ReadLn;
end.
1. Язык программирования PASCAL 75
76
Допустим, задан текстовой файл f и строка st. Данная программа
ищет в строках файла f значение переменной s и найдя, записывает строку,
где найдено это значение, в новый файл g. Проверьте работу программы.
program Task43;
var f, g : text;
s, st : string;
begin
WriteLn(‘Введите строку ’);
ReadLn(s);
Assign(f, ‘test.txt’);
Assign(g, ‘test2.txt’);
Reset(f);
Rewrite(g);
while not eof(f) do begin
ReadLn(f, st);
if pos(s, st) <> 0 then WriteLn(g, st);
end;
close(f);
close(g);
ReadLn;
end.
44. Задан текстовой файл. Запишите самую короткую строку этого файла
на новый файл.
45. Напишите программу, определяющую самую длинную строку в
текстовом файле.
46. Задан текстовой файл, состоящий из списка учащихся. На каждой
строке приведены имя и фамилия одного ученика. Напишите программу,
считывающую этот файл и выводящую его на экран.
43.
ТЕКСТОВЫЙ ДОКУМЕНТ И ЕГО ОБЪЕКТЫ
Одной из самых распространенных областей применения компьютера
является подготовка текстовых документов. Зачастую текст в процессе его
соз дания многократно изменяется. Если текст  находится на бумаге, то в нем
ос таются следы изменений. Чтобы избавиться от этой проблемы, на ком -
пью тере существуют специальные программы – текстовые процессоры,
поз воляющие работать с текстом.
Текст, созданный при помощи текстового процессора  в совокупности с
вклю ченными в него нетекстовыми элементами (рисунками, таблицами) на -
зы вают документом.
Прежде чем говорить о текстовом процессоре, следует иметь пред -
ставление об используемых в нем объектах. Познакомимся с клас си фи ка -
цией объектов текстового документа. 
Как видно из схемы, объекты текстового документа сгруппированы по
двум уровням. Объекты первого уровня подразделяются на две группы в
зависимости от среды, в которой они были созданы: это объекты cамой
среды и внедренные объекты.
Объекты среды 
(созданные в  среде текстового процессора)
Внедренные объекты 
(созданные другими прикладными программами)
ТаблицаВекторный рисунок
ФормулаТекст,  абзац, строка, символ
Выборка  данныхТаблица
Диаграмма
Рисунок
ОБЪЕКТЫ ТЕКСТОВОГО ДОКУМЕНТА
2.1.
2
ЭЛЕКТРОННЫЙ ДОКУМЕНТ
К объектам среды относятся такие объекты, для создания, ре дак ти ро ва -
ния и форматирования которых не требуется вызова иных программ.
К внедренным объектам относятся такие, которые создаются в другой
прикладной среде.
Основанием классификации на  втором уровне является тип объекта.
Рассмотрим список объектов, создаваемых текстовым процессором.
Сначала рассмотрим объекты подкласса “текст”. В тексте можно выделить
следующие объекты: символ, слово, строка, абзац, страница. 
Основными параметрами символа как объекта являются вид на чер -
тания, кегль, цвет.
Виды начертаний символа. На компьютере используются в ос нов -
ном  четыре вида начертаний символа:
• Нормальное
• Курсивное (Italic)
• Полужирное (Bold)
• Полужирное курсивное (Italic Bold)
Курсив служит в тексте средством мягкого акцентирования. Он прив ле ка -
ет внимание читателя к чему-либо, отмечает особое отношение к нему.
Полужирный шрифт служит средством сильного акцентирования. Он
может, например, указывать на непререкаемую значимость чего-либо. Кро -
ме того, им отмечают заголовки в тексте. 
Говоря о среде внедрения, рассмотрим такое
срав нение. Квартира является частью среды
оби тания городского жителя, и все в ней
пред назначено для него – мебель, посуда,
одеж да, обувь, светильники и другие бы то -
вые приборы… Однако до воз ник но ве ния го -
ро дов человека окружала живая при рода. И
сей час многие горожане, тоскуя по природе,
дер жат в своих квартирах растения, рыбок и
пр. Но ведь цветок не вырастить, скажем, на
по лу или на столе – для нор маль но го су щес -
тво вания ему требуется соот вет ству ющая
сре да, то есть земля. Значит, для то го, чтобы
вы растить растение в квартире, нужно при об -
рес ти цветочный горшок, на полнить его землей и посадить туда растение. Таким об -
ра зом, в данном случае го род ская квар тира – это среда, растение – внесенный в эту
сре ду объект, а земля – фрагмент иной среды, обеспечивающий потребности объек та.
78
2. ЭЛЕКТРОННЫЙ документ 79
Кегль – это размер шрифта. Традиционно кегль измеряется в пунктах
(пт). Один пункт равен 0,35 мм. Существует ряд стандартных кеглей. Вот
некоторые из них: 
12 Кегль  – это размер шрифта.
18 Кегль 
24 Кегль
36 Кегль
48 Кегль
60 Kегль
72 Keгль
UNICODE
Любой компьютер может работать только с цифрами. И для
того, чтобы компьютер мог хранить в своей памяти  буквы и
дру гие символы, каждому символу ставится в соответствие не -
ко торое число. Когда-то существовали сотни схем таких ко ди -
ро вок символов, однако ни одна из них не могла охватить все
необ ходимые символы. Не было системы кодирования, ох -
ватывающей все буквы, знаки препинания и технические
символы какого-то одного естественного языка. 
Назрела необходимость разработки новой схемы кодирования, включающей все
алфавиты современной цивилизации. В конце концов, был создан Unicode
(произносится как «юникод»).
Unicode – сложный объект. В его создании принимали участие лингвисты и прог -
рам мисты со всех уголков нашей планеты. В основу его положен принцип ко ди ро -
ва ния каждого символа 16-битным числом. Это значит, что на каждый символ от во -
дит ся по два байта. По такому принципу можно закодировать 65 536 знаков или
сим волов. В системе кодирования Unicode каждому символу присвоен уникальный
код, не зависящий от платформы, программы или языка.
Цвет. Большинство объектов в средах прикладных программ являются
цвет ными. Символы, линии и прочие объекты, имеющие однородную
струк туру, окрашиваются только в один цвет. В объектах со сложной струк -
ту рой (например, автофигура, клетка, поле и т.д.) контур и фон могут быть
раз ного цвета. 
Помимо основных, символ может иметь следующие дополнительные
параметры: эффект, смещение, кернинг. 
Эффект. Этот параметр определяет внешний вид знака на экране и в
рас печатке документа. В таблице приведены наиболее популярные виды эф -
фек тов.
Смещение определяет положение символа относительно базовой ли -
нии строки. Оно бывает двух типов: нижнее и верхнее.
Верхнее смещение относительно базовой линии
Нижнее смещение относительно базовой линии
Кернинг – это межсимвольный интервал. Различают три основных зна -
че ния данного параметра: нормальный, разреженный и уплотненный.
Интервал Уплотненный [Condensed]
Интервал Нормальный [Normal]
Интервал Разреженный [Expanded]
Обычно нормальное значение кернинга для данного шрифта задается ав -
то матически. При необходимости его можно сменить на другое.
80
1. Какие объекты присущи тексту?
2. Чем характеризуется символьный объект?
3. Перечислите виды начертаний символа.
4. Что такое эффекты? Раскройте их значение на примерах.
5. Что такое смещение и кернинг? Раскройте их значение на примерах.
6. Наберите какой-либо текст в текстовом процессоре и примените к его раз- 
лич ным символам параметры, изученные на уроке.
Дефис и тире
Некоторые символы имеют особое значение в тексте. Среди  таких символов –
дефис и тире. 
Дефис – это символ, соединяющий либо две части слова, либо два слова, сос тав ля -
ющие одно целое. Справа и слева от  дефиса не оставляют пробелов. Если сло во с
дефисом не помещается на строке, текстовый процессор сделает в нем пе ре нос как
раз на месте дефиса. В этом случае дефис будет одновременно выполнять и роль
знака переноса. Однако если речь идет о записи  даты, где дефис стоит меж ду
числами годов (например, “1918-1920”), то подобную надпись пе ре но сить
нежелательно. На случай таких нежелательных переносов в текстовом про цес соре
имеется особый символ – неразрывный дефис [nonbreaking hyphen].
Тире – это знак, разделяющий две части предложения. В отличие от дефиса, тире
от деляется от соседних слов пробелами. В печатной продукции тире обоз на ча ет ся
длинной горизонтальной чертой, а дефис – более короткой. Однако с кла ви а ту ры
компью тера и знак минуса, и тире, и дефис вводятся одной и той же кла ви шей.
Поэто му для обозначения тире существует специальный символ – длинное тире
[em dash].
Упражнение
1. Откройте какой-нибудь текстовый документ.
2. Прочтите текст. Определите, правильно ли в нем расставлены тире и дефисы. 
3. Исправьте обнаруженные ошибки.
4. Для вставки длинного тире и неразрывного дефиса выполните команду
InsertSymbol и выберите нужный символ во вкладке «Специальные знаки»
Special Characters.
2. ЭЛЕКТРОННЫЙ документ 81
СОЗДАНИЕ ТЕКСТОВОГО ДОКУМЕНТА
Процесс создания документа на компьютере включает следующие
этапы: ввод (набор) текста, редактирование, форматирование, печать.
Прежде чем рассмотреть каждый из этих этапов, вкратце ознакомимся с
некоторыми объектами текстового документа – словом, строкой и абзацем.
Из символов создаются слова. 
Слово – это последовательность символов (букв, цифр, специальных
зна ков) без пробелов. Единственным самостоятельным параметром
сло ва является  количество символов в нем. 
Строка состоит из слов, которые отделяются друг от друга про бе ла -
ми. Без пробела за словом в строке следуют только  знаки препинания,
та кие, как запятая, точка, точка с запятой, двоеточие, скобка. Объект
“стро ка” наследует все параметры объекта “слово”. Самостоятельным
па ра мет ром строки является количество слов.
При форматировании все правила, которым подчиняются символы и
слова, касаются и строк. 
Абзац. Из объектов-строк образуются объекты-абзацы. Абзац вво дит -
ся при помощи клавиши “Enter”. Признаком окончания абзаца
является сим вол перевода строки  ¶  (в обычном режиме этот знак на
эк ране не от ра жается). 
Ввод текста. Ввод (набор) текста обычно производится с клавиатуры.
Роль бумаги при этом выполняет экран монитора. Место для введения
очередного символа указывается на экране мерцающей вертикальной
чертой – курсором.   
Правила, которые нужно выполнять при наборе текста:
1. Все знаки препинания, кроме тире, вводятся непосредственно после пос лед- 
ней буквы слова. После знака препинания вводится пробел (для этого нужно
на жать клавишу “Spacebar”). Тире отделяется пробелами с обеих сторон.  
2. При наборе текста можно исправлять допущенные ошибки. Если при этом
сим вол, который нужно заменить, находится справа от курсора, то
используется кла виша “Delete” (“Del” ), если слева – то клавиша “Backspace”.
3. При наборе текста на компьютере не нужно обращать внимание на переход со
стро ки на строку – достигнув конца одной строки, курсор автоматически пе -
ре мес тится в начало следующей. 
4. Для того, чтобы начать новый  абзац, нажмите клавишу “Enter”.
2.2.
82
2. ЭЛЕКТРОННЫЙ документ 83
Редактирование текста. Редактирование – это изменение со дер жа -
ния документа. К редактированию относятся следующие операции: 
• набор текста;
• исправление ошибок;
• копирование, перемещение и удаление частей текста;
• дополнение текста рисунками, таблицами и другими объектами.
Форматирование текста. Внешний вид текста очень важен для того,
чтобы информацию, содержащуюся в нем можно было легко и быстро
довести до сведения читателя. Для этого некоторые слова или фрагменты
текста выделяют тем или иным образом.
Слово форматирование происходит от слова “форма”. Форматировать –
значит придавать форму чему-либо. Форматирование как операция может
включать в себя ряд тех или иных способов изменения документа:
• изменение свойств символа;
• изменение свойств абзаца;
• оформление заголовков и подзаголовков;
• преобразование текста в список;
• преобразование текста в таблицу;
• вставка колонтитулов и номеров страниц, и т.д.
Чтобы изменить свойства символов в том или ином фрагменте текста,
надо выделить этот фрагмент, а затем изменить необходимые параметры
либо с помощью кнопок панели инструментов, либо открыв диалоговое
окно “Font” (“Шрифт”).
1. Откройте какой-нибудь текстовый документ.
2. Выделите произвольный  фрагмент текста и измените шрифт в нем на
следующий: Courier New, жирный, 16 пт, красный, все прописные.
3. Выделите другой фрагмент текста и измените шрифт в нем на сле ду -
ю щий: Tahoma, курсивный, 10 пт, подчеркнутый.
4. Выделите еще один фрагмент текста и измените шрифт в нем на сле -
ду ю щий: Arial, 10 пт, скрытый (“hidden”). 
5. Перейдите в режим отражения непечатаемых символов. Для этого
щелк ните на кнопке панели инструментов. Понаблюдайте, как
из менится при этом третий выделенный фрагмент текста. Какие
Уп р а ж н е н и я
Форматирование –  это изменение внешнего вида документа или отдельных
его частей с целью облегчения его восприятия.
84
символы, не отражающиеся при печати документа, вы видите в этом
режиме?
6. Выделите еще два фрагмента текста, используя клавишу “Ctrl”, и из -
ме ни те шрифт в них на следующий: Comic Sans MS, 20 пт, зеленый,
контурный. 
Каждый документ можно сохранить в файле, отобразить на экране,
распечатать на бумаге. При распечатке документ на бумаге (физической
странице) будет иметь точно такой же вид, в каком он отображается на экране. 
На физической странице отводится определенное место для размещения
объектов документа – оно называется логической страницей. 
Размер печатного листа измеряется в миллиметрах. В Азербайджане в
качестве основного размера взят размер 841х1189 мм, формата А0 (точно
так же, как в свое время в бывшем СССР). Производные от этого формата,
более мелкие, именуются А1, А2…. А8. Каждый последующий формат
получается делением предыдущего, более крупного, пополам. 
В современном делопроизводстве в качестве основного принят формат
А4 (210х297 мм). В особых случаях (для выведения на печать крупных
таблиц) используется формат А3 (297х420 мм).
2. ЭЛЕКТРОННЫЙ документ 85
При форматировании страницы документа в любой прикладной прог -
рам ме обычно в первую очередь учитываются следующие параметры: 
• размер страницы (листа);
• ориентация страницы;
• поля;
• колонтитулы.
Ориентация страницы определяется положением листа бумаги в прос -
тран стве. Она бывает двух типов: книжная и альбомная (“портрет” и “пей -
заж”). 
Поля – это части физического листа, предназначенные для размещения
сно сок, колонтитулов и другой дополнительной информации. Правое и ле -
вое поля обычно ничем не заполняются. Колонтитулы, сноски и т.д. рас по -
лагаются в верхнем и нижнем полях. 
Колонтитулы (от фр. “colonne” – колонна и лат. “titulus” – заголовок,
пись мо) – это служебная информация, размещаемая на верхнем и нижнем
поле. Она может включать в себя имя автора, название (произведения, раз -
де ла, главы, параграфа), дату, номер страницы и т.д. Такие элементы об лег -
чают работу с большими документами, а в уже изданном произведении
обес печивают удобство при чтении.  
Книжная
(“портрет”) Альбомная
(“пейзаж”)
86
1. Откройте какой-нибудь текстовый документ.
2. Выполните команду FilePage Setup(Файл  Параметры стра ни цы).
3. Поставьте флажок в диалоговом окне Different odd and even (Раз ли -
чать колонтитулы четных и нечетных страниц) вкладки Layout
(Ис точник бумаги).
Уп р а ж н е н и е
2. ЭЛЕКТРОННЫЙ документ 87
4. Выполните команду ViewHeader and footer(ВидКолонтитулы).
5. Впишите в поле верхнего колонтитула нечетной страницы название: 
Макет 1
6. Впишите в поле нижнего колонтитула четной страницы собственные
имя и фамилию, предварительно нажав клавишу <Tab>, чтобы над -
пись расположилась по центру поля.
7. Закройте панель колонтитулов. Ознакомьтесь с документом и най ди те
в колонтитулах повторяющийся текст.  
1. Какие этапы включает в себя процесс создания компьютерного документа?
2. Что такое редактирование документа и какие операции к нему относятся?
3. Что такое форматирование документа и какие операции к нему относятся?
4. Что такое логическая страница и из каких элементов она состоит?
5. Наберите какой-нибудь текст в текстовом редакторе и отформатируйте его.
88
НАЗНАЧЕНИЕ ТАБЛИЧНОГО ПРОЦЕССОРА
Для нормального восприятия данных очень часто пользуются
таблицами. Прикладные программы, предназначенные для отображения и
обработки информации, представленной в табличной форме, называют
электронными таблицами. Иногда используют термин “электронный про -
цес сор”. Рабочая область электронной таблицы напоминает по своей струк -
туре шахматную доску. Она состоит из строк и столбцов, имеющих свои
имена.
Результатом работы программы является документ в форме таблицы или
диаграммы. Например, в табличном процессоре можно вести классный
журнал. Учителя смогут заносить в него оценки учащихся, а встроенные
формулы позволят высчитывать средний балл для каждого ученика, общую
успеваемость класса по предмету. Каждый раз, когда учитель будет вносить
новую оценку, табличный процессор будет автоматически пересчитывать
все результаты.
Характерной особенностью табличного про цес -
сора является то, что данные в нем и результаты
действий задаются в табличной форме. Для большей
наглядности эти данные можно представить в
графической форме, в виде диаграммы.
По сравнению с бумажной предшественницей электронная таблица
предос тавляет пользователю гораздо больше возможностей для работы. 
Табличный процессор на компьютере служит для работы с информацией,
представленной в табличной форме – в виде электронной таблицы.
3.1.
3
ТАБЛИЧНЫЙ
ПРОЦЕССОР
В ячейки таблицы, помимо чисел, дат и текста, можно записать также
логичес кие выражения, функции и формулы. Формулы позволяют почти
мгновенно производить пересчет и выводить в соотвествующей ячейке
новый результат при изменении исходных данных.
Первым табличным редактором, разработанным в 1979 году, был
VisiCalc. Затем на рынок было выпущено много продукции этого класса:
SuperCalc, Microsoft MultiPlan, Quattro Pro, Lotus 1-2-3, Microsoft Excel,
OpenOffice.org Calc.
В настоящее время среди электронных таблиц наибольшей
популярностью пользуется программа Microsoft Excel, входящая в пакет
Microsoft Office.
Запуск программы Excel 2003. Как и для всех программ, имеющихся на
компьютере, самый простой способ запуска программы Excel 2003 –
использование меню  Start (Пуск) в системе Windows. Для этого надо:
1. Для открытия главного меню системы Windows сделать щелчок на
кнопке Start (Пуск), находящейся на панели задач.
VisiCalc – первая электронная таблица
Впервые идею электронной таблицы сформулировал в 1961 году американский
ученый Ричард Матессич в своей печатной ра бо те “Budgeting Models and
System Simulation”. Впослед ствии эта концепция была  разработана учеными
Пардо и Ландау.
В 1979 году Ден Бриклин (1951) разработал  совместно с Бобом Френкстоном
(1949)  программу VisiCalc, тем самым заложив основы электронных таблиц. Этот
табличный редактор, разработанный для компьютера Apple II, превратил
персональный компьютер из экзотической игрушки в массовое средство для бизнеса. 
90
3. ТАБЛИЧНЫЙ процессор 91
2. Из открывшегося меню выбрать элемент All Programs (Программы).
3. Из ниспадающего меню выбрать пункт Microsoft Office.
4. Из ниспадающего меню выбрать пункт Microsoft Excel 2003.
После этого начнется загрузка программы Excel 2003 и откроется окно
этой программы с пустой книгой.
Файл программы Excel называется рабочей книгой [workbook], или
просто книгой.  Книга состоит из рабочих листов [worksheet].
Объекты электронной таблицы. Табличный документ бывает двух
видов: таблица и диаграмма.  Диаграмма является вспомогательным до ку -
мен том, не существующим без таблицы. В нижеследующей схеме дана
классификация объектов документа табличного процессора.
Первый уровень классификации относится к виду документа. На втором
уров не показаны объекты, образующие таблицу и диаграмму. На сле дую -
щих уроках будет более обстоятельно рассказано об этих объектах
1. Что такое табличный процессор?
2. Каково преимущество электронной таблицы перед обычной?
3. Как запустить электронный процессор Excel?
4. Когда была создана первая электронная таблица и как она называлась?
5. Что такое рабочая книга?
6. Запустите табличный процессор Excel  вышеописанным способом.  Каким
еще способом можно  это сделать?
Сколько ячеек в таблице?
Если сказать, что на каждом рабочем листе есть миллионы ячеек, то это не будет
ложью. На самом деле, на листе расположено  65536 строк и  256 столбцов. Если
перемножить эти значения, то получится 16777216. Значит, на каждом рабочем
листе более 16 миллионов ячеек. Если и этих ячеек не хватит, то следует
отметить, что в каждой новой книге 3 листа. Другими словами, в вашем
распоряжении в книге 50331648 ячеек  и, если и этого не хватит, то в книге
можно увеличить число рабочих листов.
Таблица Диаграмма
ЗаголовокЯчейка
РядСтрока
Область построенияСтолбец
Диапазон Ось
Легенда
ДОКУМЕНТ ТАБЛИЧНОГО ПРОЦЕССОРА
92
С
тр
о
ка
 з
а
го
л
о
в
ка
А
д
р
е
с
а
кт
и
в
н
о
й
я
ч
е
й
ки
Н
о
м
е
р
а
с
тр
о
к
С
тр
о
ка
 м
е
н
ю
П
а
н
е
л
ь
 и
н
с
тр
ум
е
н
то
в
С
тр
о
ка
 ф
о
р
м
ул
И
м
е
н
а
 с
то
л
б
ц
о
в
П
а
н
е
л
ь
 и
н
с
тр
ум
е
н
то
в
  
ф
о
р
м
а
ти
р
о
в
а
н
и
я
ОБЪЕКТЫ ЭЛЕКТРОННОЙ ТАБЛИЦЫ
Таблица представляет собой сложный объект, который состоит из эле -
мен тарных объектов: строки, столбца, ячейки, диапазона ячеек. У каж дого
эле ментарного объекта есть имя, которое определено разработчиками элек -
трон ной таблицы
Ячейка – элементарный объект, расположенный на пересечении строки
и столбца электронной таблицы.
Строка – это все ячейки, расположенные горизонтально на одном
уровне. Номер строки указывается целым числом, начиная с 1.
Столбец – это все ячейки, расположенные вертикально на одном уровне.
Заголовки столбцов задаются буквами латинского алфавита сначала от  A
до   Z,  затем  от AA до  AZ, от BA до  BZ и т.д. Имя последнего столбца
будет – IV. 
Диапазон ячеек – это группа смежных ячеек: строка или часть строки,
столбец или его часть, а также несколько смежных ячеек, образующих
прямоугольную область. Одну ячейку тоже можно считать диапазоном.
Адрес ячейки в таблице определяется ее местом в ней и содержит заго -
ловок столбца и номер строки, на пересечении которых она находится.
Внача ле записывается заголовок столбца, а затем номер строки, например,
A3, D6, AB19. 
Диапазон ячеек задается указанием первой и последней его ячеек,
разделенных двоеточием ( : ). Например, адрес диапазона, выделеннного на
верхнем рисунке, будет A4:C8.
Основным местом хранения данных в таблице является ячейка. Для
того, чтобы ввести данные в ячейку, ее надо выделить. Выделенная ячейка
Строка
Часть строки
Ячейка Столбец Часть столбцаДиапазон ячеек
3.2.
3. ТАБЛИЧНЫЙ процессор 93
берется в толстую черную рамку. Для выделения ячейки используют как
мышь, так и клавиши клавиатуры.
Выделенную ячейку называют активной [active cell]. Имя активной
ячейки можно увидеть на  верхней левой стороне рабочего листа. Если вы -
де лен диапазон ячеек, то первая выделенная ячейка будет активной.
Данные, вводимые с клавиатуры, записываются в активную ячейку.  Для
того, чтобы ввести данные в ячейку, надо:
1. Навести указатель мыши на нужную ячейку и щелкнуть мышью, или
же использовать для этого клавиши перемещения курсора.
2  Ввеcти число (например, 19 или 12,3), текст (например, Ко ли чес тво
учеников) или формулу.
После ввода данных в ячейку для изменения активной ячейки можно
использовать клавиши или комбинацию клавиш.
<Enter>  . . . . . . . . . Выделяет ячейку под текущей ячейкой.
<Tab>  . . . . . . . . . . . Выделяет ячейку справа от текущей ячейки. 
<Shift+Enter>  . . . . Выделяет ячейку сверху от текущей ячейки.
<Shift+Tab>  . . . . . . Выделяет ячейку слева от текущей ячейки.
Способы выделения объектов электронной таблицы.
• Чтобы выделить ячейку, надо навести указатель мыши на нее и щелкнуть, или же
с помощью клавиш управления курсором переместить курсор на нужную ячейку.
• Для выделения столбца надо щелкнуть на его заголовке.
• Для выделения строки надо щелкнуть на ее номере.
• Диапазон ячеек можно выделить несколькими способами:
– путем протаскивания указателя мыши при нажатой левой кнопки;
– с помощью клавиш управления курсором при нажатой клавише <Shift>;
– вводом с клавиатуры начального и конечного адресов ячеек диапазона,
разделенных двоеточием.
94
3. ТАБЛИЧНЫЙ процессор 95
Если ввести значение в ячейку A1 и нажать клавишу <Enter>, то
Microsoft Excel выделит ячейку A2.
Если ввести значение в ячейку A2 и нажать клавишу <Tab>, то
выделится ячейка B2.
1. Щелкните по кнопке New Blank Document на панели инструментов.
Откроется новая книга Book2.
2.  Выделите ячейку A3.
3. Наберите с помощью клавиатуры слово Порядковый. Обратите внима -
ние на то, что набранный вами текст отображается и в ячейке, и в строке
формул.
4. Нажмите клавишу <Tab>. Активной станет ячейка справа B3. Наберите
текст Образовательное учреждение. 
5. Нажмите заново клавишу <Tab> и введите текст Год создания. Нажав
снова клавишу <Tab> наберите: Число учащихся. Нажмите клавишу
<Enter>. Активной станет ячейка A4.
6. Щелкните на ячейке A3. Запись Порядковый будет видна как в самой
ячейке, так и в строке формул. Приведите указатель мыши на конец слова
Порядковый в строке формул и щелкните мышью. 
7. Нажмите клавишу Пробел и напишите слово  номер. Затем нажмите кла -
вишу <Enter> или значок  в строке формул. Изменится содер жание
ячейки A3. 
8. Перейдите в ячейку B3. В ней содержится запись Образовательное уч -
реж дение. Введите текст Название школы и нажмите клавишу
<Enter>. Содер жи мое ячейки изменится на новую запись.
9. Щелкните по ячейке C3. В ней имеется запись Год создания. Нажмите
клавишу  <F2>. Обратите внимание на то, что курсор ввода перешел в
конец текста.
10. Используя клавишу <Backspace>, удалите существующий текст,  набе -
рите Год образования и нажмите клавишу <Enter>. Запись в ячейке
заменится на новую, и ячейка C4 станет активной.
11. Для перехода к клавише A4 дважды нажмите клавишу  <←> .  Введите
число 1 и нажмите клавишу <Enter>. Станет активной ячейка A5.
З а д а н и е
96
12. После каждого ввода номера нажмите клавишу <Enter> и введите чис ла
5
3
4
5
13. Для выделения столбца A щелкните по соответствующей букве.
Обратите внимание, что все ячейки поменяют цвет, кроме первой, так
как она активная.
14. Выделите 5-ю строку. Введите число 2. Обратите внимание: это число
записалось в ячейку A5.
15. Сохраните рабочий лист под названием Школы. 
1. Перечислите объекты электронной таблицы.
2. Как распознать столбец, строку, ячейку?
3. Как задается адрес диапазона ячеек?
4. Что такое активная ячейка?
5. Составьте таблицу вашего класса на основе приведенного образца.
6. Составьте электронную таблицу на любую тему.
ДАННЫЕ ЭЛЕКТРОННОЙ ТАБЛИЦЫ.  ФОРМУЛЫ
В табличных процессорах предусмотрены разные форматы представления
данных. Форматы определяют типы данных электронной таблицы: символьные
(текстовые), числовые, логические, даты и т.д. От того, какой формат выбран
для той или иной ячейки, будет зависеть, какие действия табличный процессор
сможет выполнять над ее содержимым.
Допустим, в ячейку помещены следующие цифры: 28051918. Как они будут
восприняты табличным процессором? Если установлен текстовый формат,
то цифры будут восприняты как  символы 2,8,0,5,1,9,1,8. Если установлен
числовой формат, то эта запись будет воспринята как число, и если задан
формат дат, то эти цифры будут восприняты как дата 28 мая 1918 года.
Текстовый тип данных. Текстовые данные – это некоторый набор сим -
волов. Если первый из них является буквой, кавычкой, апострофом или про -
бе лом, либо цифры чередуются с буквами, то такая запись воспри ни ма ет ся
как текст.
Действия над символьными данными производятся аналогично
действиям над объектами в текстовом процессоре.
Числовой тип данных. Числовые данные представляют собой последова -
тельность цифр, которые могут быть разделены десятичной запятой и начи -
наться с цифры, знака числа (“+” или “ −”) или десятичной запятой. Над число -
вы ми данными в электронной таблице могут производится различные матема -
тические операции.
Если в ячейке таблицы хранится последовательность цифр, начинаю -
щая ся с кавычки, то, хотя такой набор цифр и выглядит на экране как
число, на самом деле это текст. Его нельзя использовать в вычислениях.
Любые текстовые данные в вычислениях всегда  воспринимаются как ноль.
Существует признак, по которому можно определить, какой тип данных
в ячейке: числовой или текстовый. Если в ячейку вводится
текст, то он автоматически после нажатия клавиши
<Enter> выравнивается по левому краю ячейки, а если
вводятся числовые данные, то они выравниваются по
правому краю ячейки.
3.3.
Примеры числовых данных:
232.5            –13.7         .546            +100
Примеры текстовых данных:
Расписание занятий
“236
9 A класс
001
3. ТАБЛИЧНЫЙ процессор 97
Текст 12,5
.0123 0,0123
\456 -456
Логический тип данных. Логические данные используются в логи -
ческих формулах и функциях. Данные этого типа отображаются в текущей
ячейке следующим образом: если вводится любое отличное от нуля число
(це лое или дробное), то после нажатия клавиши <Enter> в этой ячейке
будет выведено True [истина]. Ноль в соотвествующей ячейке отобразится
как False [ложь].
Такое представление данных связано с представлением логической
переменной в алгебре логики.
Тип данных – даты. Этот тип данных используют при добавлении
числа к дате, вычисления разности двух дат, при пересчете даты, например,
вперед или назад. Преобразование чисел в дату происходит автоматически,
в зависимости от заданного формата. Табличный процессор дает
возможность представления введенных чисел как даты в нескольких
форматах. Например,
28 апреля 2008
Апрель 2008
Апрель
28.04.2008
04.2008
28 апреля
Формулы. Электронная таблица предназначена в первую очередь для
автоматизации вычислений. Для этой цели в ячейки вводятся формулы.
В формулах могут быть использованы числовые данные, знаки опера -
ций, различные функции, адреса объектов таблицы. Формулы с адресами
яче ек можно сравнить с математическими формулами, в которых вместо
адре сов ячеек – переменные.
Адреса, которые участвуют в формулах, называются  ссылками.  Ссылки
позволяют связывать между собой любые ячейки электронной таблицы и
проводить необходимую обработку табличных данных.
Ссылка – это адрес объекта (ячейки, строки, столбца, диапазона), используемый
при записи формулы.
Ввод любой формулы начинается со знака равенства (=). Если он отсутствует,
вводимая формула воспринимается как текст. 
98
Формулы состоят из операндов, соединенных между собой знаками
арифметических и логических операций. Операндом может быть данное,
ссылка, функция.
Различают арифметические (алгебраические)  и логические формулы.
Арифметические формулы. В арифметических формулах исполь зу ют -
ся арифметические операции (“ + ” сложение, “ − ” вычитание, “ * ” ум но -
жение, “ / ” деление и “ ^ ” возведение в степень). При вычислении по
формулам, так же, как и в математике, соблюдается порядок выполнения
ариф ме ти чес ких операций: сначала выполняется возведение в степень,
затем – ум но же ние и деление и наконец – сложение и вычитание. Операции
одно го уровня, нап ример, умножение и деление, выполняются слева
направо. Для из ме не ния порядка выполнения арифметических действий
исполь зуют круглые скоб ки. Действия над операндами, заключенными в
круглые скобки, вы пол ня ются в первую очередь.
Результатом вычислений по арифметической формуле является число.
При каждом изменении входящих в формулу операндов результат пересчи -
ты вается заново и отображается в соответствующей ячейке.
Логические формулы Логическая формула содержит некоторое
условие и определяет, истинно оно или ложно. Истинному выражению
прис ваивается значение “true” (“истина”, 1), ложному выражению – “false”
(“ложь”, 0).
Однотипные формулы. При работе с электронной таблицей часто
возникает необходимость в заполнении какого-то диапазона ячеек фор му -
лами, имеющими одинаковую структуру, но разные значения переменных,
то есть когда формулы различаются ссылками. Такие формулы называются
однотипными.
Для упрощения  и ускорения ввода однотипных формул  используют та -
кой прием: формула вводится только в одну ячейку, далее она копи ру ет -
ся в другие ячейки.
Пример однотипных формул:
=A1+5 =A1*5 =A1+B3 =A1*B3 =(A1+B3)*D2
=A2+5 =B1*5 =A2+B4 =B1*C3 =(C3+D5)*F4
=A3+5 =C1*5 =A3+B5 =C1*D3 =(D4+E6)*G5
=A4+5 =D1*5 =A4+B6 =D1*E3 =(B4+C6)*E5
Однотипные формулы – это формулы, имеющие одинаковую структуру, но
различающиеся ссылками.
3. ТАБЛИЧНЫЙ процессор 99
Абсолютная, относительная и смешанная адресация. В однотипных
фор мулах могут использоваться различные ссылки. Существуют такие
одно типные формулы, при копировании которых часть ссылок изменяется
закономерным образом, другая же часть остается неизменной для всех
формул. 
При копировании формулы в другое место таблицы надо определить
способ  автоматического изменения ссылок. Для этого исползуются относи -
тельные, абсолютные и смешанные ссылки
• Если формула при копировании изменяется, то используются
относительные ссылки.
Относительная ссылка записывается в обычной форме, например,
F3 или E7. При копировании во всех ячейках, куда будет
помещается формула, изменятся и буква столбца, и номер строки.
• Абсолютная ссылка записывается в формуле в том случае, если при
ее копировании не должны изменяться обе части: буква столбца и
номер строки. Это указывается при помощи символа $, который
ставится и перед буквой столбца и перед номером строки. Например,
$F$3 или же $E$7. Во всех ячейках, куда формула будет скопи ро -
вана, по яв ят ся точно такие же формулы.
• Смешанная ссылка используется в формулах тогда, когда при
копировании формулы может изменяться только какая-то одна часть
ссылки – либо буква столбца, либо номер строки. При этом символ $
ставится перед той частью ссылки, которая должна оставаться
неизменной. Например, $F3 или   E$7.
1. Запустите текстовой процессор.
2. Создайте новый документ (рабочую книгу).
3. Заполните таблицу  согласно образцу.
4. Выделите ячейку E3. Введите с помощью клавиатуры формулу  =b3+c3+d3.
Обратите внимание на то, что набранная формула отображается как в
ячейке, так и в строке формул.
З а д а н и е
100
5. Нажмите клавишу <Enter> или щелкните на значке в строке формул.
Результат вычисления по формуле  – число 50313 появится   в ячейке E3.
6. Щелкните по ячейке E3. Обратите внимание на то, что формула отоб ра -
жа ется в строке формул.
7. Щелкните по ячейке E4. Введите с клавиатуры знак равенства  “ =”. За -
тем щелкните по ячейке B4. Обратите внимание: ссылка на ячейку B4
вид на как в строке формул, так и после знака равенства “ = ”.
8. Введите с клавиатуры знак + и щелкните на ячейке C4, еще раз введите +
и щелкните на ячейке D4. Формула = B 4 + C 4 + D 4 будет отображаться
как в ячейке, так и в строке формул.
9. Нажмите клавишу <Enter> или нажмите на значок  в строке формул.
В ячейке E4 появится значение формулы – 51476.
10. Сделайте двойной щелчок по ячейке B4. Поменяйте значение ячейки на
16750. Затем нажмите клавишу <Enter>. Обратите внимание, что зна че -
ние ячейки  Е4 изменится на 50476.
11. Выберите ячейку E5. Введите с клавиатуры формулу =b4+c4+d4 и наж -
ми те клавишу <Enter>. В ячейке E5 появится значение 50476. Обратите
вни мание: отображаемое значение одинаково с содержимым ячейки E4,
так как их содержимое вычисляется по одной и той же формуле. 
12. Сделайте двойной щелчок по ячейке E5 и замените в формуле ссылку
B4 на b5. Нажмите клавишу <Enter>.
13. Щелкните на ячейке E5. Нажмите клавишу <F2> и замените вторую
ссылку C4 на c5.
14. Щелкните на строке формул и замените третью ссылку D4 на d5. Затем
нажмите клавишу <Enter>. В ячейке E5 отобразится значение 56866.
15. Щелкните по ячейке E6 и введите с клавиатуры знак равенства “ = ”.
Затем щелкните по ячейке B6, введите + , щелкните по ячейке C6,
введите + и щелкните по ячейке D6. Нажмите клавишу <Enter> и
посмотрите, какое число отобразится в ячейке E6. Там должно быть
число 64597.
3. ТАБЛИЧНЫЙ процессор 101
1. Назовите типы данных, используемых в табличном процессоре, и  их
особенности.
2. Что такое ссылка в электронной таблице и чем она отличается от адреса?
3. Что такое относительная адресация в формулах? Приведите примеры.
4. Что такое абсолютная адресация в формулах и как она указывается?
Приве дите примеры.
5. Объясните правила копирования формул. 
6. Введите в ячейку A2 – значение переменной х, в ячейку B2 – значение
переменной у, в ячейку C2 – значение переменной z. Получите значение
математического выражения (x+y)*2+3*z  в ячейке   D2. Для этого запишите
эту формулу в ячейку D2. Задавая различные значения для x, y, z  проследите
за изменением значения ячейки D2.
7. Создайте таблицу согласно образцу.  Используя формулу, вычислите
возраст учащихся.
8. Укажите в ячейке A2 скорость автомобиля, а в ячейке  B2 – время, зат ра чен -
ное на прохождение определенного расстояния. Вычислите в ячейке C2 путь,
пройденный автомобилем (s=v*t). Увеличьте значение ячейки B2 в 2, 3, 4 раза.
Как изменится значение ячейки C2?
9. Создайте нижеследующую электронную таблицу. В ячейках B3, B7, C3, D7
размещены числа. Запишите в ячейку C3 формулу =4*B3, в ячейку D3
формулу  =В3*В3, в ячейку E7 формулу =B7+C7+D7, а в ячейку F7 формулу
=B7*C7/2. Поменяйте  числа в ячейках  B3, B7, C7 и D7 на другие и
проследите изменения в ячейках с формулами.
10. Немецкий физик Г.Фаренгейт в 1724 году предложил температурную
шкалу, названную его именем. Температура по шкале Фаренгейта связана
с температурой по шкале Цельсия соотношением:
Составьте таблицу, переводящую температуру, измеренную по шкале
Фаренгейта, в температуру по шкале Цельсия.
102
СОЗДАНИЕ И РЕДАКТИРОВАНИЕ ДИАГРАММЫ
Диаграмма является одним из объектов электронной таблицы. Она
предназначена для представления данных в графической форме. Данные,
расположенные в одном столбце или в одной строке, называются рядом.
Для построения диаграммы вначале надо указать  ряды, а затем выбрать тип
диаграммы. Каждая диаграмма характеризуется следующими параметрами:
имя, тип, область, размещение.
Имя. Каждой диаграмме дается имя, под которым она включается в
состав электронный таблицы.
Тип. В табличном процессоре можно строить диаграммы различных
типов. Внизу показаны основные типы диаграмм. 
Познакомимся с некоторыми из них.
• Линейная диаграмма [ line chart] знакома вам из многих предметов. Ее
назы вают еще графиком. На одном чертеже можно разместить
несколько графиков, каждый из которых соотвествует своему ряду
данных.
• Столбчатая диаграмма [column chart], или гистограмма, может быть
построена для нескольких рядов данных. Высота каждого столбика
определяется значением в соответствующей ячейке.
• Поверхностная диаграмма [surface chart] строится только для нескольких
рядов и состоит из группы цветных многослойных поверхностей.
• Круговая диаграмма [pie chart] используется для отображения одного
ряда значений. Каждый сектор такой диаграммы отражает
относительную (выраженную в процентах) долю каждого значения из
ряда от общей суммы всех данных.
Область ограничивает поле чертежа построения диаграммы.
Линейная Точечная Лепестковая
Столбчатая Линейчатая Поверхностная
Круговая Кольцевая С областями
3.4.
3. ТАБЛИЧНЫЙ процессор 103
Размещение. Диаграмма может размещаться либо на том же листе, что
и таблица, либо на отдельном листе. 
Объекты диаграммы. Диаграмма сама является сложным объектом  и
состоит из элементарных объектов: ряд, ось, заголовок, легенда, область
построения.
Ряд. Диаграмма может быть построена как по одному ряду, так и по нес -
кольким рядам. Для выделенного диапазона ячеек построение диаграммы
ведется по нескольким рядам данных. В этом случае в качестве каждого
ряда принимается соответствующая строка или столбец выделенного
диапазона.
Ось. Каждая из осей диаграммы характеризуется следующими парамет -
рами: вид, шкала, шрифт, число, выравнивание.
• Вид определяет отображение внешнего вида оси на экране.
• Шкала определяет минимальное и максимальное значение шкалы,
значение основных и промежуточных делений, точку пересечения с
другими осями.
• Число определяет формат шкалы в соответствии с типами данных,
на ходящихся в диапазоне.
Заголовок. Заголовок размещается над диаграммой и, как правило,
задается пользователем.
Легенда. Легенда диаграммы – это список названий рядов, обычно в
рамочке. 
Область построения. Это ограниченная осями область для размещения
рядов данных. Для удобства анализа результатов на область построения
может наносится сетка.
104
Область
диаграммы
Заголовок
Область
построения
Легенда
Ряд
Ось
Создадим нижеследующую таблицу:
Для построения диаграммы к этой таблице нужно вначале выделить
ячейки, которые необходимо графически представить (A2:B8), затем
щелкнуть по кнопке  Chart Wizard на стандартной панели инструментов
или же выбрать команды InsertChart из строки меню. В результате
откроется соответствующее диалоговое окно.
Для выделения объекта диаграммы сначала надо сделать двойной щелчок на
диаграмме, а затем щелкнуть на  нужном объекте.
3. ТАБЛИЧНЫЙ процессор 105
На первой странице диалогового окна Chart Wizard нужно выбрать тип и
вид диаграммы. При выборе конкретного типа диаграммы справа в области
Chart sub-type отображаются виды этого типа диаграммы. Следует выбрать
один какой-то вид. Выберем круговой тип (Pie) диаграммы и нажатием
кнопки Next перейдем на следующую страницу.
На этой странице следует проверить, правильно ли указан диапазон выб -
ран ных ячеек на вкладке Data range и затем щелкнуть по кнопке Next.
На открывшейся странице определяется внешний вид диаграммы.
Например, в области Chart title указывается заголовок диаграммы (Число
азер байджанцев, проживающих в мире в 2007 году, млн.). 
Если требуется отобразить значение данных на диаграмме, необхо димо
на вкладке Data Labels щелкнуть по кнопке Va lue. После определения
внешнего вида диаграммы следует снова щелкнуть по кнопке Next.
Откроется последняя страница  диалогового окна Chart Wizard.
На этой странице определяется место, где будет размещена диаграмма:
на отдельном листе (As new sheet) или же на текущем листе (As object in).
Щелкнув по кнопке Finish диаграмма появится на выбранном месте.
106
Рассмотрим другой пример. Допустим, необходимо построить график
функции y= x2 − 7x + 10  на отрезке [-8; 8]. Для этого построим таблицу,
содержащую значения  этой функции (рис. 3.1.). Шаг изменения аргумента
возьмем равным 1.
Для построения диаграммы (графика) выделим диапазон ячеек А4:В20
и щелкнем по кнопке Chart Wizard. Выберем тип диаграммы – XY (Scatter),
а вид  – или    ,  или   .
рис. 3.1.
3. ТАБЛИЧНЫЙ процессор 107
Затем щелкнем по кнопке Next и перейдем на новую страницу, где
укажем заголовок диаграммы.  На вкладке GridLines уберем все “флажки”
и щелкнем по кнопке Finish. В результате получим график, изображенный
на рис.3.2. 
1. Из каких объектов состоит диаграмма?
2. Назовите основные типы диаграмм в табличном процессоре.
3. Какие параметры характеризуют любую диаграмму?
4. Создайте данную таблицу и постройте соответствующую ей диаграмму.
рис. 3.2.
108
_____________________________________________________________________
5. Рассмотрев диаграммы, ответьте на вопросы:
• Какая информация представлена на диаграмме? Как вы определили это?
• Как эту информацию можно представить в виде таблицы?
• Что больше всего интересует подрастающее поколение?
ФОРМАТИРОВАНИЕ ТАБЛИЧНОГО ДОКУМЕНТА
Под форматированием табличного документа понимается ряд
действий по изменению формы представления как самого документа, так и
его объектов. Наряду со способами форматирования в текстовом процес -
соре, в электронной таблице имеются особые приемы форматирования:
• данные в ячейках могут быть представлены в различных форматах;
• может быть изменена высота строки и ширина столбца, где хранятся
данные;
• любой объект электроной таблицы может быть  взят в рамочку или
же выделен специальным узором.
Форматирование произвольного объекта табличного документа произ -
водится посредством команд раздела  Format из строки меню. А теперь
позна комим ся  с форматированием отдельных ячеек, строк и столбцов.
3.5.
3. ТАБЛИЧНЫЙ процессор 109
Формат ячейки характеризуется следующими параметрами:  число,
вырав нивание, шрифт, рамка, вид, защита. Число определяет тип данных,
хранящихся в ячейке, и формат представления числовых значений. Вырав -
ни ва нием и шрифтом пользуются так же, как и во всех других
программных сре дах. Рамка определяет внешнее обрамление ячейки (тип,
толщину, штрих линии). Вид определяет заливку и узор фона ячейки.
Защита оп ре дел яет уровень защиты данных в ячейке. Например, можно
защитить ячейку от изменения содержимого или же скрыть формулу в ней.
Формат строки позволяет регулировать высоту строки и управлять
отоб ра же нием строки в таблице. Высота строки регулируется автомати -
чески или вручную. При автоматической регулировке высоты строки выби -
рается такое значение, чтобы все данные помещались в строке.
Формат столбца позволяет регулировать ширину столбца и управлять
отображением столбца в таблице. Ширина столбца может регулироваться
авто матически или вручную. При автоматической  регулировке ширины
столб ца выбирается такое значение, чтобы все данные помещались в столб -
це в одну строку.
Отображение строк и столбцов. Любую строку или столбец в таблице
можно спрятать. Это необходимо, когда строки или столбцы используются
для записи промежуточных расчетов. Впоследствии скрытые строки и
столбцы можно вновь вывести на экран. 
Форматы данных. Для представления числовых данных используются
различные форматы: общий, числовой, процентный, денежный, экспонен -
циальный и др.
• По умолчанию используется общий формат, и любые данные, вве -
ден ные в этом формате (текст, числа, дата и т.д.), автоматически рас -
поз наются и форматируются. 
• Числовой формат обеспечивает представление чисел в ячейках с за -
дан ным пользователем количеством десятичных знаков. Например,
если выбран формат с точностью три десятичных знака после
запятой, то при вводе числа 19 в ячейку на экране появится 19,000, а
при вводе числа 0,12345 – число 0,123.
• Процентный формат обеспечивает представление числовых дан -
ных в форме процентов, со знаком “%“. Например, если установлена
точность в один десятичный знак, то при вводе числа 0,257 на экране
появится 25,7%, а при вводе 257 – 25700,0%.
• Денежный формат обеспечивает такое представление чисел, при
котором каждые три разряда разделены пробелом, а следом за
110
последним десятичным знаком указывается денежная единица
размерности.
• Экспоненциальный  (научный) формат обеспечивает представление
вводимых чисел в виде двух частей: мантисы и порядка числа.
Например, если задана точность в два знака после запятой, то число
12345 в экспоненциальном формате запишется как 1,23Е+04. Здесь
1,23 – мантисса, а запись Е+04 понимается как четвертая степень
числа 10.
Изменение высоты строки и ширины столбца. Если ширина вводи мо -
го числа превышает ширину ячейки (столбца), то вместо числа в ячейке
выво дятся знаки # (решетка). При вводе текста, длина символов которого
больше ширины ячейки, на экране отображается только часть введенного
текс та в пределах установленной ширины столбца. Количество умещаю -
щихся в ячейке символов при вводе текста зависит не только от ширины
ячейки, но и от выбранного типа шрифта и его размера.
Во всех этих случаях возникает необходимость увеличить ширину
столбца. Это можно сделать двумя способами:
• выбрав в меню Format команду ColumnAutoFitSelection или же
команду ColumnWidth, в открывшемся диалоговом окне задать
нужное значение;
• установить указатель мыши на границу раздела между заголовками
столбцов (вид курсора изменится на двустороннюю стрелку) и, не
отпуская левой кнопки мыши, изменить ширину столбца до нужного
размера перетаскиванием границы влево или вправо.   
Аналогично можно изменить и высоту строки.
В табличном процессоре есть возможность закрашивания фона объекта
различными цветами и узорами.
3. ТАБЛИЧНЫЙ процессор 111
1. Запустите табличный процессор и создайте файл Школьники.xls.
2. Заполните ячейки от B4 до B8. 
3. Наведите указатель мыши на правую границу заголовка столбца B. После
того как указатель примет вид двусторонней стрелки, удерживая левую
кнопку мыши, протяните его  вправо для увеличения  ширины столбца.
4. Щелкните по заголовку столбца B для его выделения. 
5. Выберите в меню Format вкладку ColumnAutoFit Selection. Програм -
ма Excel автоматически расширит ширину столбца по размеру его со дер -
жи мого.
6. Для выделения строки 3 щелкните по ее заголовку.
7. В меню Format выберите вкладку  RowHeight. Введите число 25 для
ус тановления высоты строки и нажмите ОК.
8. Вы увидите, что 3-я строка будет в 3 раза выше других.
9. Щелкните по любой ячейке рабочего листа и отмените выделение строки.
Сохраните изменения, закрыв файл.
1. Создайте в программе Excel расписание ваших уроков, как в  ни же при -
ве денном примере.
2. Чтобы разместить название таблицы (РАСПИСАНИЕ УРОКОВ) над
таб лицей посередине, выделите диапазон A1:G1. Выберите команду
Format Cells.
З а д а н и е 2
З а д а н и е 1
112
3. В открывшемся диалоговом окне выберите вкладку Alignment (Выравни ва -
ние). Отметьте щелчком строку Merge cells (Объединение ячеек). Ре зуль -
татом этого действия будет объединение выделенных ячеек в одну – A1.
4. Чтобы разместить содержимое ячейки по центру, надо в этом же окне, в
раз деле Text alignment, выбрать в блоке Horizontal строку Center.
5. Отрегулируйте размеры строк и столбцов в таблице.
6. Выделите диапазон ячеек B3:G3. Выберите  вкладку Patterns из диалого -
во го окна Format Cells. Выберите цвет для диапазона (например, го лу -
бой). Щелкните на кнопке ОК. Выбранный диапазон зальется со от вет -
ству ющим цветом, и исчезнут границы между ячейками.  
7. Для того, чтобы установить рамку для выбранных ячеек, необходимо вы -
де лить их и выбрать в диалоговом окне  вкладку Borders.
Если щелкнуть по Outline, то у выбранных ячеек будут выделены внеш -
ние границы. Если необходимо отобразить и внутренние границы между
ячей ками, то необходимо щелкнуть по Inside. Для отображения и внеш -
них, и внутренних границ необходимо щелкнуть последовательно по
двум этим кнопкам.
3. ТАБЛИЧНЫЙ процессор 113
8. Окрасьте диапазон ячеек B4:G9 желтым цветом.
1. Что подразумевает форматирование документа?
2. Какими параметрами характеризуется форматирование ячейки?
3. Используя форматирование, создайте следующую электронную таблицу.
114
4
ИНФОРМАЦИОННОЕ
ОБЩЕСТВО
ИНФОРМАТИЗАЦИЯ ОБЩЕСТВА
С момента возникновения человечества в нем всегда шла борьба сначала
за ресурсы, затем – за энергию и, наконец, за информацию. На заре развития
ци вилизации человеку хватало элементарных знаний и умений, но затем, с
увеличением количества информации, он начал ощущать не дос таточность
своих знаний. Для правильной обработки ин фор ма ции и принятия нужных
ре шений требовалось обобщить знания и опыт лю дей. Для этого человек
начал изобретать различные инструменты. Воз ни к ли специальные методы и
приспособления для переработки информации, вы зывавшие в обществе
глубокие изменения – информационные ре во лю ции. 
В этом отношении человечество пережило четыре этапа, наиболее силь но
пов лиявшие на его развитие и именуемые информационными ре во лю ци я ми. 
Первый этап. Благодаря возникновению письменности стало воз мож -
ным хранить знания и передавать их последующим поколениям. 
Второй этап (середина XVI века). Начался с изобретением книго пе ча та -
ния. Итогом этой революции стало появление абсолютно нового способа
4.1.
хра нения информации. Человек получил новое средство для хранения,
систематизации и распространения информации. 
Это средство создало возможность для массового приобщения к ду хов -
ным и культурным ценностям.   
Третий этап (конец XIX века). Связан с открытием свойств элек три чес -
ко го тока. Были созданы телеграф, телефон и радио, позволяющие пе ре да -
вать информацию в необходимом объеме с большой скоростью, принимать
ее и хранить. Появились информационно-коммуникационные средства.    
Четвертый этап (70-е гг. XX века). Изобретена технология мик ро про -
цес соров, появились персональные компьютеры.
Электрические и механические средства информации остались в прош -
лом – их сменили электронные средства. Эти средства позволили произ во -
дить машины и приборы более миниатюрных размеров и создавать прог -
рам мно-управляемые устройства. Основной причиной начала четвертой ре -
во люции явилось создание в 40-х гг. минувшего века электронной вы чис ли -
тель ной машины. 
116
4. ИНФОРМАЦИОННОЕ общество 117
Четвертая информационная революция дала человечеству толчок для  пе -
рехода от промышленного общества к информационному обществу. Это на -
поминает переход человечества от аграрного общества к про мыш лен но му. 
Вот некоторые характерные признаки информационного общества:
1. С увеличением объема информации человек будет использовать для ее
обработки и хранения специальные технические средства. В ин фор -
ма ционном обществе человек или коллектив, для того чтобы принять
ка кое-то решение, собирает определенную информацию, об ра ба ты ва -
ет и анализирует ее. Объем информации достигает такой степени, что
че ловек уже не способен сам ее обрабатывать – он привлекает для
этой цели специальные технические средства.
2. Пользование компьютером станет неизбежным. В информационном
обществе пользование компьютером – насущная необходимость. Оно
дает возможность использовать достоверные источники информации,
снижает объем бесполезной работы, ускоряет принятие оптимальных
решений и автоматизирует обработку информации.
3. Движущей силой общества станет производство информационных
продуктов. Во второй половине XX века значительная часть людей пе -
реш ла из сферы производства материальных продуктов в ин фор ма ци -
он ную сферу. Сложилась новая социальная прослойка населения, не
занятая в производстве материальных продуктов. Эти люди (педагоги,
бан ков ские служащие, программисты и т.д.) заняты обработкой
информации. В новом обществе материальные блага будут по большей
части “информационноемкие”. Их ценность будет зависеть от инно -
ваций, дизайнерских решений и качества маркетинга. 
4. В информационном обществе производимым продуктом станут
знания и интеллект, что, в свою очередь, увеличит долю интеллек -
туаль ного труда. Гораздо больше людей будут избирать профессии,
связанные с интеллектуальным трудом. 
Информационное общество – это такое общество, большая часть членов
которого занимается производством, хранением, обработкой и использованием
информации.  
118
5. Произойдет переоценка ценностей, сформируется новый образ жиз -
ни, изменятся и развлечения, которыми человек занимается в сво бод -
ное время. Уже сейчас компьютерные игры занимают впечатляющую
долю свободного времени человека. Эти игры трансформируются в
сис тему, соединяющую игроков, географически далеких друг от
друга. Рас тет число людей, проводящих время в Интернете. Они
посещают об разовательные сайты, путешествуют по виртуальным
музеям, на ходят необходимую литературу в виртуальных библио -
теках, и т.д. Осо бый успех у пользователей имеют службы бесед
(чаты) и ICQ. С по мощью этих служб люди, находящиеся далеко друг
от друга, общаются в режиме реального времени.
6. Будут развиваться компьютерная техника, компьютерные сети, ин -
фор мационные технологии. Сеть Интернет будет ежемесячно рас шир -
яться на 10 –15%, число ее пользователей будет исчисляться сот ня ми
мил лионов. Использование современных мультимедийных систем, со -
че тающих в себе функции различных устройств (компьютера, те ле ви зо -
ра, радио, телефона и т.д.) приведет к универсальности ин фор ма цион -
ных технологий. Устройства для накопления информации умень шат ся в
габаритах до того, что будут умещаться в ладони. В них, нар я ду с
несколькими объемными энциклопедиями, будут размещены так же
универсальные личные сведения пользователя. При подключении это го
устройства к сети можно будут получать оперативную ин фор мацию –
например, прогноз погоды или сведения о пробках на дорогах. 
7. Во всех домах будет много электронных приборов и компьютерных ус -
трой ств. Вместо системы проводов дом будет оснащен одним элек три -
чес ким и одним информационным кабелем. Информационный кабель
будет служить для связи, трансляции телеканалов и выхода в Интернет.
Спе циальный электронный блок будет контролировать все бытовое обо -
рудование и жилищные системы по принципу “умный дом”. По ми мо
“умных домов”, появятся “умные автомобили”, оснащенные не только
ком пьютерами, отвечающими за техническую часть ав то мо биля, но и
сис те мой, подключенной к городским службам информации. Та кой
автомобиль бу дет связан с “умным домом” и даже сможет уп рав лять им.
8. Производство энергии и материальных продуктов будет осу щес тв -
лять ся при помощи машин, человек же будет занят преиму -
щественно обработкой информации. Количество людей, занятых в
производстве, уменьшится – их место займут роботы и манипуляторы. 
119
9. В сфере образования будет создана непрерывная система обучения.
Человек получит возможность учиться всю жизнь, чтобы идти в ногу
со временем, менять при необходимости профессию и занимать
достойное место в обществе. 
10. Дети смогут учиться на дому посредством компьютерных программ
и телекоммуникаций. Но, наряду с этим, изменятся формы обучения
в учебном процессе, в результате чего могут возникнуть проблемы,
связанные с его воспитательным аспектом. 
11. Возникнет и будет развиваться рынок информационных услуг.
Информация будет иметь вид товаров или услуг. Этот продукт можно
будет продавать как обычный товар. 
Для перехода от промышленного общества к информационному должны
были возникнуть условия информационного кризиса. Такие условия
возникли в XX веке. Стало трудно ориентироваться в потоке информации,
захлестнувшем людей. Появилось много излишней, ненужной информации.
Переход к информационному обществу начался с использования совре -
менных средств для обработки и передачи информации в различных
сферах. Этот процесс называется информатизацией. 
Процесс информатизации общества обеспечивает переход от про мыш -
лен ного общества к информационному. 
Процесс информатизации общества дает возможность каждому члену
общества получать необходимую ему информацию.
До недавнего времени вместо слова “информатизация” использовалось сло -
во “компьютеризация”. Однако ком пью те ри зация предполагает лишь раз ви тие
и ис пользование компьютерной техники, тогда как ин фор ма ти за ция – бо лее
ши ро кое понятие. В наши дни первостепенное значение имеют не столь ко тех -
ни че ские средства, сколько сам социально-технический про цесс. Ком пью те ри -
за ция – лишь часть процесса информатизации, его тех ни чес кая база. 
Информационная культура. 
Человеческая культура определяется:
• знаниями, умениями и профессиональными навыками;
• уровнем интеллектуального, эстетического и духовного развития;
• формами и методами общения с людьми.
Личная культура человека определяется его:
• уровнем интеллектуального развития;
• характером профессиональной и творческой деятельности.
Это означает, что свой личный культурный уровень человек повышает,
раз вивая интеллектуальные навыки, представления, мысли. Именно поэ то -
4. ИНФОРМАЦИОННОЕ общество
120
му культурный уровень людей, занятых в сферах науки и творчества, дол -
жен быть высоким. Переход к информационному обществу несет с собой
воз никновение еще одной категории общечеловеческой культуры – ин фор -
ма ционной культуры.
Под информационной культурой человека понимается следующее: 
– освоение навыков использования различных технических ус тройств,
от телефона до персонального компьютера и ком пью тер ных сетей;
– способность к освоению информационных технологий;
– навыки получения информации из периодической печати и элек -
трон ных коммуникаций;
– умение представить информацию в четкой и ясной форме и ис поль -
зо вать ее с максимальной пользой;
– владение различными методами обработки информации;
– навыки работы с различными видами информации.
Информационные ресурсы. Каждое государство, общество, компания
и каждый человек нуждаются в ресурсах для своей жизнедеятельности. 
В современном обществе наряду с материальными, сырьевыми, энер ге -
ти ческими, трудовыми и финансовыми ресурсами востребованы также и
информационные ресурсы.
Все ресурсы, кроме информационных, расходуются по мере пот реб ле -
ния. Например, топливо, сгорая, исчезает, финансовые ресурсы рас хо ду ют -
ся, и т.д. Информационные же ресурсы неисчерпаемы, их можно применять
мно гократно.
1. Перечислите все информационные революции в истории человечества.
2. Каковы характерные признаки информационного общества?
3. Можно ли назвать информационным то общество, в котором мы сейчас живем?
4. Что такое информационная культура?
5. Что называется информационными ресурсами и в чем их отличие от  про -
чих ресурсов?
Информационная культура – это навыки использования компьютерной
техники и современных технических средств и методов для целенаправленной
работы с информацией, ее приема, обработки и распространения. 
К информационным ресурсам относятся научно-технические знания,
произве де ния литературы и искусства и другая информация, имеющая об -
щественно-государственное значение. 
Ресурсы – это источники и запасы различных средств.
СФЕРЫ ПРИМЕНЕНИЯ КОМПЬЮТЕРНОЙ ТЕХНИКИ
Первая электронно-вычислительная машина была изобретена примерно
60 лет назад. С того времени технология производства компьютеров и прог -
рам много обеспечения прошла огромный путь развития. Безусловно, ком -
пью теры коренным образом изменили наше общество. Финансы, дело про -
из водство, промышленность, науку, здравоохранение, образование и другие
сфе ры в наше время просто невозможно представить без компьютеров. Се -
годня для обработки информации повсеместно пользуются компьютерами. 
Компьютер в образовании. Подготовка вы со ко ква -
лифицированных специалистов –  долгий и слож ный
процесс. Обучение сначала в средней шко ле, по том в
вузе занимает значительную часть человеческой жиз ни.
Между тем в современном инфор мационном об ществе
знания очень быстро ус таревают. Для ос во е ния
профессиональ ных на вы ков в любой сфере де я тель -
ности человеку при хо дится постоянно пополнять свое базовое об ра зование. 
В информационном обществе гораздо важнее знать “как”, нежели “что”.
Поэтому в наши дни основная задача школ и вузов состоит не в том, чтобы
дать выпускнику как можно большее количество знаний, а в том, чтобы обу -
чить его свободно получать эти знания. А это, в свою очередь, не воз мож но
без применения в образовании современных информационных и ком му ни -
ка ционных технологий. 
Одно из важнейших направлений применения информационных и ком -
му никационных технологий в образовании – использование мульти ме дий -
ных возможностей компьютера. Использование мультимедийных средств
уси ливает наглядность, сочетая в себе логическое и образное усвоение ин -
фор мации, а это активизирует учебный процесс. Мультимедийные тех но ло -
гии предоставляют широкие возможности для построения интерактивных
лич ностно-ориентированных учебных моделей.   
Используя информационно-коммуникационные технологии, можно ор -
га низовать дистанционное обучение. При дистанционном обу че нии педагог
и учащийся находятся далеко друг от друга – учебный про цесс осу щес тв ля -
ет ся посредством телекоммуникаций, прежде всего сети Ин тер нет.
Благодаря дистанционному обучению многие люди (взрослые люди, зан -
я тые про фес сио наль ными и семейными заботами, молодежь из сел и
неболь ших городов) имеют возможность повысить свое образование на
дому.
4.2.
1214. ИНФОРМАЦИОННОЕ общество
Компьютер в научных исследованиях. Современные на учные ис сле -
до вания в различных областях знаний, про во ди мые крупными коллек ти -
вами ученых, инженеров и конс трук торов, требуют очень сложного и
дорогостоящего обо ру дования. Эффективность научных
разработок зависит в пер вую очередь от степени исполь -
зования компьютерной тех ники. Компьютеры применяются
для про ве дения расчетов, ана ли за ре зуль татов экспе ри -
ментов, под го товки до ку мен тов и т.д. В ре зультате:
• во много раз сокращаются сроки проведения исследований;
• повышается точность и достоверность результатов;
• усиливается контроль над ходом экспериментов;
• увеличение числа контролируемых параметров и более точная об ра -
бот ка данных повышают качество и информативность экс пе ри мен тов;
• итоги экспериментов выдаются оперативно и в удобной форме (нап -
ри мер, в виде графиков, диграмм и т.д.).
Компьютер в здравоохранении. В современном об -
щес тве роль компьютеров в здравоохранении растет день
ото дня. Врачи используют компьютеры в различных целях.
Пе речислим некоторые из них:
1. Установление диагноза, проведение осмотров и про фи -
лак тических проверок;
2. Поиск доноров для трансплантации органов через компьютерные сети;
3. Возможность держать медработников в курсе новейших научных и
прак тических достижений благодаря банку медицинских данных;
4. Определение влияния загрязнения воздуха на распространение бо лез ней;
5. Подкрепление практических навыков медработников. При этом  ком -
пью тер выступает в качестве больного, которому требуется не мед лен -
ная помощь. На основании симптомов, выданных компьютером, обу -
ча ющийся должен определить курс лечения. Если он ошибся, ком пью -
тер сразу показывает это;
6. Создание карт, показывающих скорость распространения эпи де мий;
7. Хранение истории болезни пациентов, что освобождает врачей от
бумажной работы, на которую уходит много времени, и позволяет
больше времени уделять самим больным.
Компьютер в торговле. В большинстве су пер мар ке тов
на каждой единице товара имеется этикетка с бар -ко дом
(штрих-кодом), пред став ля ющим собой строку
вертикальных ли ний разной толщины. При оплате бар-код
122
123
счи ты ва ет ся ска нером, после чего компьютер, к ко торому под со е ди нен этот
сканер, сверяет данный бар-код с прайс-листом (рас ценками на товар) и
выдает цифру нужной суммы на экран кассового ап парата. В магазинах и на
складах, применяющих систему бар-кодов, ин фор мация о каждой
разновидности товара хранится в базе данных.
К числу наиболее распространенных типов бар-кодов относится 13-раз -
ряд ный европейский EAN-13 (European Article Numbering) и применяемый
в США и Канаде код UPC. 
Количество цифр в коде страны и коде производителя может быть
различным. Код Азербайджана в этой системе – 476. 
Одно из важнейших направлений информатизации – переход денежно-
кредитной и финансовой сферы на электронную систему оплаты.
Безналичная торговля. В торговой сфере все большее рас прос тра не -
ние получает оплата при помощи кредитных карт. При использовании
кредитной карты нужная сумма автоматически переводится с банковского
счета покупателя на банковский счет магазина. 
Бар-код содержит в себе информацию о товаре и его производителе.
Структура кода EAN-13
1. Код страны.
2. Код производителя.
3. Код товара.
4. Регистрационная цифра.
5.Пометка о том, что данный продукт является лицензионным.
4. ИНФОРМАЦИОННОЕ общество
Система безналичной торговли POS (Post of Sale System) выполняет
следующие функции:
• верификация, то есть удостоверение подлинности кредитных карт;
• снятие денег со счета покупателя;
• перевод денег на счет продавца.
Информация на кредитной карте нанесена при помощи магнитной
записи. Для хранения информации на кредитной карте используется
магнитная карта.
На магнитной карте хранится следующая информация:
• номер личного счета;
• название банка;
• название страны;
• категория платежеспособности клиента;
• количество выданных карт и пр.
Банкоматы. Одна из наиболее распространенных сетей в мире – сеть
машин для наличного расчета, то есть банковских автоматов, или
банкоматов (ATM – Automated Teller Machine). Компьютеры тысяч банков
по всему миру соединены между собой. Банкоматы предназначены для
клиентов, имеющих банковские кредитные карточки. 
Обладая кредитной картой, выданной каким-либо из банков Азербай джана,
можно получить в банкомате наличные деньги, даже находясь за рубежом. Вот
принцип работы банкомата:
1. Клиент вставляет карту в прорезь банкомата и вводит с его кла ви а ту -
ры свой личный шифр.
2. Банкомат считывает информацию с магнитной ленты карты – имя
вла дельца, номер счета и т.д. 
124
3. Банкомат (точнее, его компьютер) посредством телефонной ли нии пе -
ре сы лает информацию на центральный компьютер, где хранится
информация о тысячах банках.
4. Центральный компьютер проверяет счет, после чего посылает на бан -
ко мат информацию, либо разрешающую выдать на лич ность, либо
вы нуждающую отклонить запрос.   
Компьютер в сельском хозяйстве. Если у фермера имеется ком -
пью тер, он может быстро и легко производить подсчеты необходимого ко -
ли чества семян для посева и нужного объема удобрений. С помощью ком -
пьютерной системы можно планировать сроки посевов, рассчитывать гра -
фик полива, управлять кормлением скота и производить множество других
по лезных операций. 
Технологическая революция в сельском хозяйстве происходит буквально
на наших глазах: с помощью компьютеров и персональных микросенсоров
ста ло возможным контролировать состояние каждого животного или рас те -
ния, что, в свою очередь, позволяет экономить финансовые и че ло ве чес кие
ресурсы, повышая таким образом уровень жизни людей.
1. Как вы себе представляете применение ИКТ в образовании?
2. Что такое дистанционное обучение?
3. Для каких целей применяются компьютеры в здравоохранении?
4. Что такое бар-код и какова его структура?
5. Опишите принцип действия банкомата.
6. Что такое кредитная карта и каково ее устройство?   
1254. ИНФОРМАЦИОННОЕ общество
ПРОГРАММА
IX класс
(1 час в неделю, итого 32 часа)
I. ЯЗЫК ПРОГРАММИРОВАНИЯ PASCAL (21 час)
Классификация программного обеспечения. Языки прог рам ми ро ва -
ния. Языки высокого уровня. Разработка программ. Редактор Turbo
Pascal. Об щая структура программы. Операторы. Опе ра то ры вы бо ра.
Операторы цикла. Массивы. Ра бота со строками. Подпрограммы.
Файлы. 
II. ЭЛЕКТРОННЫЙ ДОКУМЕНТ (4 часа)
Текстовой документ и его объекты. Создание текстового документа.
Ре дактирование документа. Форматирование документа.
III. ТАБЛИЧНЫЙ ПРОЦЕССОР (5 часов)
Назначение табличного процессора. Объекты электронной таблицы.
Дан ные электроннной таблицы. Формулы. Создание и редактирование
ди аграмм. Форматирование табличного документа.
IV. ИНФОРМАЦИОННОЕ ОБЩЕСТВО (2 часа)
Информатизация общества. Сферы  применения компьютерной тех ни ки.
126
О ГЛ А В Л Е Н И Е
1.ЯЗЫК ПРОГРАММИРОВАНИЯ PASCAL 
1.1. Классификация программного обеспечения.  . . . . . . . . . . . . . 30
1.2. Языки программирования  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 60
1.3. Языки высокого уровня  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 90
1.4. Разработка программ  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 13
1.5. Редактор Turbo Pascal  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 16
1.6. Общая структура программы  . . . . . . . . . . . . . . . . . . . . . . . . . . . 20
1.7. Операторы . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 26
1.8. Операторы выбора  If   и Case  . . . . . . . . . . . . . . . . . . . . . . . . . . 32
1.9. Циклы. Операторы While, For и Repeat  . . . . . . . . . . . . . . . . . . . 36
1.10. Массивы  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 41
1.11. Работа со строками  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 45
1.12. Подпрограммы. Функции и процедуры . . . . . . . . . . . . . . . . . . 50
1.13. Работа с файлами  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 55
1.14. Практикум . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 61
2. ЭЛЕКТРОННЫЙ ДОКУМЕНТ 
2.1. Текстовой документ и его объекты  . . . . . . . . . . . . . . . . . . . . . . 77
2.2. Создание текстового документа  . . . . . . . . . . . . . . . . . . . . . . . . 82
3. ТАБЛИЧНЫЙ ПРОЦЕССОР 
3.1. Назначение табличного процессора  . . . . . . . . . . . . . . . . . . . . . 89
3.2. Объекты электронной таблицы . . . . . . . . . . . . . . . . . . . . . . . . . . 93
3.3. Данные электронной таблицы. Формулы  . . . . . . . . . . . . . . . . . 97
3.4. Создание и редактирование диаграмм . . . . . . . . . . . . . . . . . . . 103
3.5. Форматирование табличного документа  . . . . . . . . . . . . . . . . . 109
4. ИНФОРМАЦИОННОЕ ОБЩЕСТВО 
4.1. Информатизация общества  . . . . . . . . . . . . . . . . . . . . . . . . . . . . 115
4.2. Сферы  применения компьютерной техники  . . . . . . . . . . . . . 121
Программа  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 126
1274. ИНФОРМАЦИОННОЕ общество
Исмаил Джалал оглу Садыгов  
Рамин Алиназим оглу Махмудзаде
Наида Ризван гызы Исаева 
Информатика – 9. Учебник для 9-го класса общеобразовательной школы.
Баку, “Bakınəşr”, 2010, 128 с.
© Дизайн “Bakınəşr”, “TM group”, 2010.
Формат 70 ×1001/16. Oфсетная бумага №1. Ф/п.л.  8,0. Подписано в печать.
25.05.2010. Гарнитура “Тims New Roman”. Тираж 10000. Бесплатно.
128
